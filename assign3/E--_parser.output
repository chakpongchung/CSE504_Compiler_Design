Terminals unused in grammar

   TOK_LEX_ERROR
   TOK_PAT_NOT
   TOK_UMINUS
   TOK_PRINT
   TOK_SHORT
   TOK_DOUBLE_COLON
   TOK_LBRACK
   TOK_DOT


Grammar

    0 $accept: specification $end

    1 specification: ifc_decl_star rule_star
    2              | /* empty */

    3 ifc_decl_star: /* empty */
    4              | ifc_decl_star ifc_decl
    5              | ifc_decl_star error TOK_SEMICOLON

    6 ifc_decl: class_decl TOK_SEMICOLON
    7         | variable_decl
    8         | event_decl
    9         | function_decl
   10         | TOK_SEMICOLON

   11 class_decl: TOK_CLASS TOK_IDENT

   12 base_type: TOK_INT
   13          | TOK_BOOL
   14          | TOK_BYTE
   15          | TOK_DOUBLE
   16          | TOK_VOID
   17          | TOK_STRING
   18          | TOK_UNSIGNED TOK_INT
   19          | TOK_IDENT

   20 type_decl: base_type

   21 integer_literal_decl: TOK_UINTNUM

   22 double_literal_decl: TOK_DOUBLENUM

   23 bool_literal_decl: TOK_TRUE
   24                  | TOK_FALSE

   25 str_const_decl: TOK_STRCONST

   26 literal_decl: integer_literal_decl
   27             | double_literal_decl
   28             | str_const_decl
   29             | bool_literal_decl

   30 literal_prt: literal_decl

   31 assignment_decl: ref_exp TOK_ASSIGN exp

   32 exp: literal_prt
   33    | ref_exp
   34    | assignment_decl
   35    | function_invocation
   36    | exp TOK_PLUS exp
   37    | exp TOK_MINUS exp
   38    | exp TOK_MULT exp
   39    | exp TOK_DIV exp
   40    | exp TOK_AND exp
   41    | exp TOK_BITAND exp
   42    | exp TOK_BITOR exp
   43    | exp TOK_GT exp
   44    | exp TOK_GE exp
   45    | exp TOK_LT exp
   46    | exp TOK_LE exp
   47    | exp TOK_OR exp
   48    | exp TOK_SHL exp
   49    | exp TOK_SHR exp
   50    | exp TOK_BITXOR exp
   51    | exp TOK_MOD exp
   52    | exp TOK_EQ exp
   53    | exp TOK_NE exp
   54    | TOK_BITNOT exp
   55    | TOK_MINUS exp
   56    | TOK_NOT exp
   57    | TOK_LPAREN exp TOK_RPAREN

   58 rule_star: rule_event

   59 rule_event: rule_decl
   60           | rule_event rule_decl

   61 rule_decl: rule statement_decl

   62 rule: event_pattern TOK_ARROW

   63 event_pattern: primitive_pattern
   64              | event_pattern TOK_PAT_STAR
   65              | TOK_NOT event_pattern
   66              | event_pattern TOK_PAT_OR event_pattern
   67              | event_pattern TOK_COLON event_pattern
   68              | TOK_LPAREN event_pattern TOK_RPAREN

   69 primitive_pattern: pattern_type
   70                  | pattern_type TOK_BITOR exp

   71 pattern_type: normal_event
   72             | any_event

   73 any_event: TOK_ANY

   74 event_decl_hdr: TOK_EVENT TOK_IDENT

   75 event_decl: event_decl_hdr formal_param_list_decl TOK_SEMICOLON

   76 normal_event: TOK_IDENT TOK_LPAREN event_param_list_star TOK_RPAREN

   77 event_param_list_star: /* empty */
   78                      | event_param_list

   79 event_param_list: TOK_IDENT
   80                 | event_param_list TOK_COMMA TOK_IDENT

   81 statement_decl: TOK_SEMICOLON
   82               | only_if_without_else
   83               | only_if_without_else TOK_ELSE statement_decl
   84               | function_invocation TOK_SEMICOLON
   85               | assignment_decl TOK_SEMICOLON
   86               | TOK_RETURN exp TOK_SEMICOLON
   87               | compound_statement_star

   88 statement_decl_list: statement_decl
   89                    | statement_decl_list statement_decl

   90 function_invocation: TOK_IDENT function_invocation_list

   91 inside_function: exp
   92                | inside_function TOK_COMMA exp

   93 function_list: /* empty */
   94              | inside_function

   95 function_invocation_list: TOK_LPAREN function_list TOK_RPAREN

   96 function_body_decl: variable_decl_list statement_decl_list
   97                   | statement_decl_list

   98 function_body_invoc: TOK_LBRACE function_body_decl TOK_RBRACE

   99 only_if_without_else: TOK_IF exp statement_decl

  100 compound_statement_decl: TOK_LBRACE statement_decl_list TOK_RBRACE

  101 compound_statement_star: compound_statement_decl
  102                        | compound_statement_decl TOK_SEMICOLON

  103 ref_exp: TOK_IDENT

  104 variable_name: TOK_IDENT
  105              | TOK_IDENT TOK_ASSIGN exp

  106 variable_name_decl: variable_name
  107                   | variable_name_decl TOK_COMMA variable_name

  108 variable_decl: type_decl variable_name_decl TOK_SEMICOLON

  109 variable_decl_list: variable_decl
  110                   | variable_decl_list variable_decl

  111 param_list_star: /* empty */
  112                | param_list

  113 param_list: param_decl
  114           | param_list TOK_COMMA param_decl

  115 param_decl: type_decl TOK_IDENT

  116 formal_param_list_decl: TOK_LPAREN param_list_star TOK_RPAREN

  117 function_header: type_decl TOK_IDENT

  118 function_decl_only: function_header formal_param_list_decl

  119 function_decl: function_decl_only TOK_SEMICOLON
  120              | function_decl_only function_body_invoc


Terminals, with rules where they appear

$end (0) 0
error (256) 5
TOK_LEX_ERROR (258)
TOK_PAT_STAR (259) 64
TOK_PAT_OR (260) 66
TOK_PAT_NOT (261)
TOK_PLUS (262) 36
TOK_MINUS (263) 37 55
TOK_UMINUS (264)
TOK_MULT (265) 38
TOK_DIV (266) 39
TOK_MOD (267) 51
TOK_BITAND (268) 41
TOK_BITOR (269) 42 70
TOK_BITNOT (270) 54
TOK_BITXOR (271) 50
TOK_SHL (272) 48
TOK_SHR (273) 49
TOK_GT (274) 43
TOK_LT (275) 45
TOK_GE (276) 44
TOK_LE (277) 46
TOK_EQ (278) 52
TOK_NE (279) 53
TOK_AND (280) 40
TOK_OR (281) 47
TOK_NOT (282) 56 65
TOK_COMMA (283) 80 92 107 114
TOK_ASSIGN (284) 31 105
TOK_SEMICOLON (285) 5 6 10 75 81 84 85 86 102 108 119
TOK_COLON (286) 67
TOK_ARROW (287) 62
TOK_LBRACE (288) 98 100
TOK_RBRACE (289) 98 100
TOK_LPAREN (290) 57 68 76 95 116
TOK_RPAREN (291) 57 68 76 95 116
TOK_IF (292) 99
TOK_ELSE (293) 83
TOK_CLASS (294) 11
TOK_RETURN (295) 86
TOK_EVENT (296) 74
TOK_ANY (297) 73
TOK_PRINT (298)
TOK_UINTNUM (299) 21
TOK_DOUBLENUM (300) 22
TOK_VOID (301) 16
TOK_STRING (302) 17
TOK_STRCONST (303) 25
TOK_INT (304) 12 18
TOK_UNSIGNED (305) 18
TOK_BOOL (306) 13
TOK_BYTE (307) 14
TOK_DOUBLE (308) 15
TOK_SHORT (309)
TOK_TRUE (310) 23
TOK_FALSE (311) 24
TOK_IDENT (312) 11 19 74 76 79 80 90 103 104 105 115 117
"then" (313)
"reduce" (314)
TOK_DOUBLE_COLON (315)
TOK_LBRACK (316)
TOK_DOT (317)


Nonterminals, with rules where they appear

$accept (63)
    on left: 0
specification (64)
    on left: 1 2, on right: 0
ifc_decl_star (65)
    on left: 3 4 5, on right: 1 4 5
ifc_decl (66)
    on left: 6 7 8 9 10, on right: 4
class_decl (67)
    on left: 11, on right: 6
base_type (68)
    on left: 12 13 14 15 16 17 18 19, on right: 20
type_decl (69)
    on left: 20, on right: 108 115 117
integer_literal_decl (70)
    on left: 21, on right: 26
double_literal_decl (71)
    on left: 22, on right: 27
bool_literal_decl (72)
    on left: 23 24, on right: 29
str_const_decl (73)
    on left: 25, on right: 28
literal_decl (74)
    on left: 26 27 28 29, on right: 30
literal_prt (75)
    on left: 30, on right: 32
assignment_decl (76)
    on left: 31, on right: 34 85
exp (77)
    on left: 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49
    50 51 52 53 54 55 56 57, on right: 31 36 37 38 39 40 41 42 43 44
    45 46 47 48 49 50 51 52 53 54 55 56 57 70 86 91 92 99 105
rule_star (78)
    on left: 58, on right: 1
rule_event (79)
    on left: 59 60, on right: 58 60
rule_decl (80)
    on left: 61, on right: 59 60
rule (81)
    on left: 62, on right: 61
event_pattern (82)
    on left: 63 64 65 66 67 68, on right: 62 64 65 66 67 68
primitive_pattern (83)
    on left: 69 70, on right: 63
pattern_type (84)
    on left: 71 72, on right: 69 70
any_event (85)
    on left: 73, on right: 72
event_decl_hdr (86)
    on left: 74, on right: 75
event_decl (87)
    on left: 75, on right: 8
normal_event (88)
    on left: 76, on right: 71
event_param_list_star (89)
    on left: 77 78, on right: 76
event_param_list (90)
    on left: 79 80, on right: 78 80
statement_decl (91)
    on left: 81 82 83 84 85 86 87, on right: 61 83 88 89 99
statement_decl_list (92)
    on left: 88 89, on right: 89 96 97 100
function_invocation (93)
    on left: 90, on right: 35 84
inside_function (94)
    on left: 91 92, on right: 92 94
function_list (95)
    on left: 93 94, on right: 95
function_invocation_list (96)
    on left: 95, on right: 90
function_body_decl (97)
    on left: 96 97, on right: 98
function_body_invoc (98)
    on left: 98, on right: 120
only_if_without_else (99)
    on left: 99, on right: 82 83
compound_statement_decl (100)
    on left: 100, on right: 101 102
compound_statement_star (101)
    on left: 101 102, on right: 87
ref_exp (102)
    on left: 103, on right: 31 33
variable_name (103)
    on left: 104 105, on right: 106 107
variable_name_decl (104)
    on left: 106 107, on right: 107 108
variable_decl (105)
    on left: 108, on right: 7 109 110
variable_decl_list (106)
    on left: 109 110, on right: 96 110
param_list_star (107)
    on left: 111 112, on right: 116
param_list (108)
    on left: 113 114, on right: 112 114
param_decl (109)
    on left: 115, on right: 113 114
formal_param_list_decl (110)
    on left: 116, on right: 75 118
function_header (111)
    on left: 117, on right: 118
function_decl_only (112)
    on left: 118, on right: 119 120
function_decl (113)
    on left: 119 120, on right: 9


state 0

    0 $accept: . specification $end

    $end      reduce using rule 2 (specification)
    $default  reduce using rule 3 (ifc_decl_star)

    specification  go to state 1
    ifc_decl_star  go to state 2


state 1

    0 $accept: specification . $end

    $end  shift, and go to state 3


state 2

    1 specification: ifc_decl_star . rule_star
    4 ifc_decl_star: ifc_decl_star . ifc_decl
    5              | ifc_decl_star . error TOK_SEMICOLON

    error          shift, and go to state 4
    TOK_NOT        shift, and go to state 5
    TOK_SEMICOLON  shift, and go to state 6
    TOK_LPAREN     shift, and go to state 7
    TOK_CLASS      shift, and go to state 8
    TOK_EVENT      shift, and go to state 9
    TOK_ANY        shift, and go to state 10
    TOK_VOID       shift, and go to state 11
    TOK_STRING     shift, and go to state 12
    TOK_INT        shift, and go to state 13
    TOK_UNSIGNED   shift, and go to state 14
    TOK_BOOL       shift, and go to state 15
    TOK_BYTE       shift, and go to state 16
    TOK_DOUBLE     shift, and go to state 17
    TOK_IDENT      shift, and go to state 18

    ifc_decl            go to state 19
    class_decl          go to state 20
    base_type           go to state 21
    type_decl           go to state 22
    rule_star           go to state 23
    rule_event          go to state 24
    rule_decl           go to state 25
    rule                go to state 26
    event_pattern       go to state 27
    primitive_pattern   go to state 28
    pattern_type        go to state 29
    any_event           go to state 30
    event_decl_hdr      go to state 31
    event_decl          go to state 32
    normal_event        go to state 33
    variable_decl       go to state 34
    function_header     go to state 35
    function_decl_only  go to state 36
    function_decl       go to state 37


state 3

    0 $accept: specification $end .

    $default  accept


state 4

    5 ifc_decl_star: ifc_decl_star error . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 38


state 5

   65 event_pattern: TOK_NOT . event_pattern

    TOK_NOT     shift, and go to state 5
    TOK_LPAREN  shift, and go to state 7
    TOK_ANY     shift, and go to state 10
    TOK_IDENT   shift, and go to state 39

    event_pattern      go to state 40
    primitive_pattern  go to state 28
    pattern_type       go to state 29
    any_event          go to state 30
    normal_event       go to state 33


state 6

   10 ifc_decl: TOK_SEMICOLON .

    $default  reduce using rule 10 (ifc_decl)


state 7

   68 event_pattern: TOK_LPAREN . event_pattern TOK_RPAREN

    TOK_NOT     shift, and go to state 5
    TOK_LPAREN  shift, and go to state 7
    TOK_ANY     shift, and go to state 10
    TOK_IDENT   shift, and go to state 39

    event_pattern      go to state 41
    primitive_pattern  go to state 28
    pattern_type       go to state 29
    any_event          go to state 30
    normal_event       go to state 33


state 8

   11 class_decl: TOK_CLASS . TOK_IDENT

    TOK_IDENT  shift, and go to state 42


state 9

   74 event_decl_hdr: TOK_EVENT . TOK_IDENT

    TOK_IDENT  shift, and go to state 43


state 10

   73 any_event: TOK_ANY .

    $default  reduce using rule 73 (any_event)


state 11

   16 base_type: TOK_VOID .

    $default  reduce using rule 16 (base_type)


state 12

   17 base_type: TOK_STRING .

    $default  reduce using rule 17 (base_type)


state 13

   12 base_type: TOK_INT .

    $default  reduce using rule 12 (base_type)


state 14

   18 base_type: TOK_UNSIGNED . TOK_INT

    TOK_INT  shift, and go to state 44


state 15

   13 base_type: TOK_BOOL .

    $default  reduce using rule 13 (base_type)


state 16

   14 base_type: TOK_BYTE .

    $default  reduce using rule 14 (base_type)


state 17

   15 base_type: TOK_DOUBLE .

    $default  reduce using rule 15 (base_type)


state 18

   19 base_type: TOK_IDENT .
   76 normal_event: TOK_IDENT . TOK_LPAREN event_param_list_star TOK_RPAREN

    TOK_LPAREN  shift, and go to state 45

    $default  reduce using rule 19 (base_type)


state 19

    4 ifc_decl_star: ifc_decl_star ifc_decl .

    $default  reduce using rule 4 (ifc_decl_star)


state 20

    6 ifc_decl: class_decl . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 46


state 21

   20 type_decl: base_type .

    $default  reduce using rule 20 (type_decl)


state 22

  108 variable_decl: type_decl . variable_name_decl TOK_SEMICOLON
  117 function_header: type_decl . TOK_IDENT

    TOK_IDENT  shift, and go to state 47

    variable_name       go to state 48
    variable_name_decl  go to state 49


state 23

    1 specification: ifc_decl_star rule_star .

    $default  reduce using rule 1 (specification)


state 24

   58 rule_star: rule_event .
   60 rule_event: rule_event . rule_decl

    TOK_NOT     shift, and go to state 5
    TOK_LPAREN  shift, and go to state 7
    TOK_ANY     shift, and go to state 10
    TOK_IDENT   shift, and go to state 39

    $default  reduce using rule 58 (rule_star)

    rule_decl          go to state 50
    rule               go to state 26
    event_pattern      go to state 27
    primitive_pattern  go to state 28
    pattern_type       go to state 29
    any_event          go to state 30
    normal_event       go to state 33


state 25

   59 rule_event: rule_decl .

    $default  reduce using rule 59 (rule_event)


state 26

   61 rule_decl: rule . statement_decl

    TOK_SEMICOLON  shift, and go to state 51
    TOK_LBRACE     shift, and go to state 52
    TOK_IF         shift, and go to state 53
    TOK_RETURN     shift, and go to state 54
    TOK_IDENT      shift, and go to state 55

    assignment_decl          go to state 56
    statement_decl           go to state 57
    function_invocation      go to state 58
    only_if_without_else     go to state 59
    compound_statement_decl  go to state 60
    compound_statement_star  go to state 61
    ref_exp                  go to state 62


state 27

   62 rule: event_pattern . TOK_ARROW
   64 event_pattern: event_pattern . TOK_PAT_STAR
   66              | event_pattern . TOK_PAT_OR event_pattern
   67              | event_pattern . TOK_COLON event_pattern

    TOK_PAT_STAR  shift, and go to state 63
    TOK_PAT_OR    shift, and go to state 64
    TOK_COLON     shift, and go to state 65
    TOK_ARROW     shift, and go to state 66


state 28

   63 event_pattern: primitive_pattern .

    $default  reduce using rule 63 (event_pattern)


state 29

   69 primitive_pattern: pattern_type .
   70                  | pattern_type . TOK_BITOR exp

    TOK_BITOR  shift, and go to state 67

    $default  reduce using rule 69 (primitive_pattern)


state 30

   72 pattern_type: any_event .

    $default  reduce using rule 72 (pattern_type)


state 31

   75 event_decl: event_decl_hdr . formal_param_list_decl TOK_SEMICOLON

    TOK_LPAREN  shift, and go to state 68

    formal_param_list_decl  go to state 69


state 32

    8 ifc_decl: event_decl .

    $default  reduce using rule 8 (ifc_decl)


state 33

   71 pattern_type: normal_event .

    $default  reduce using rule 71 (pattern_type)


state 34

    7 ifc_decl: variable_decl .

    $default  reduce using rule 7 (ifc_decl)


state 35

  118 function_decl_only: function_header . formal_param_list_decl

    TOK_LPAREN  shift, and go to state 68

    formal_param_list_decl  go to state 70


state 36

  119 function_decl: function_decl_only . TOK_SEMICOLON
  120              | function_decl_only . function_body_invoc

    TOK_SEMICOLON  shift, and go to state 71
    TOK_LBRACE     shift, and go to state 72

    function_body_invoc  go to state 73


state 37

    9 ifc_decl: function_decl .

    $default  reduce using rule 9 (ifc_decl)


state 38

    5 ifc_decl_star: ifc_decl_star error TOK_SEMICOLON .

    $default  reduce using rule 5 (ifc_decl_star)


state 39

   76 normal_event: TOK_IDENT . TOK_LPAREN event_param_list_star TOK_RPAREN

    TOK_LPAREN  shift, and go to state 45


state 40

   64 event_pattern: event_pattern . TOK_PAT_STAR
   65              | TOK_NOT event_pattern .
   66              | event_pattern . TOK_PAT_OR event_pattern
   67              | event_pattern . TOK_COLON event_pattern

    $default  reduce using rule 65 (event_pattern)


state 41

   64 event_pattern: event_pattern . TOK_PAT_STAR
   66              | event_pattern . TOK_PAT_OR event_pattern
   67              | event_pattern . TOK_COLON event_pattern
   68              | TOK_LPAREN event_pattern . TOK_RPAREN

    TOK_PAT_STAR  shift, and go to state 63
    TOK_PAT_OR    shift, and go to state 64
    TOK_COLON     shift, and go to state 65
    TOK_RPAREN    shift, and go to state 74


state 42

   11 class_decl: TOK_CLASS TOK_IDENT .

    $default  reduce using rule 11 (class_decl)


state 43

   74 event_decl_hdr: TOK_EVENT TOK_IDENT .

    $default  reduce using rule 74 (event_decl_hdr)


state 44

   18 base_type: TOK_UNSIGNED TOK_INT .

    $default  reduce using rule 18 (base_type)


state 45

   76 normal_event: TOK_IDENT TOK_LPAREN . event_param_list_star TOK_RPAREN

    TOK_IDENT  shift, and go to state 75

    $default  reduce using rule 77 (event_param_list_star)

    event_param_list_star  go to state 76
    event_param_list       go to state 77


state 46

    6 ifc_decl: class_decl TOK_SEMICOLON .

    $default  reduce using rule 6 (ifc_decl)


state 47

  104 variable_name: TOK_IDENT .
  105              | TOK_IDENT . TOK_ASSIGN exp
  117 function_header: type_decl TOK_IDENT .

    TOK_ASSIGN  shift, and go to state 78

    TOK_LPAREN  reduce using rule 117 (function_header)
    $default    reduce using rule 104 (variable_name)


state 48

  106 variable_name_decl: variable_name .

    $default  reduce using rule 106 (variable_name_decl)


state 49

  107 variable_name_decl: variable_name_decl . TOK_COMMA variable_name
  108 variable_decl: type_decl variable_name_decl . TOK_SEMICOLON

    TOK_COMMA      shift, and go to state 79
    TOK_SEMICOLON  shift, and go to state 80


state 50

   60 rule_event: rule_event rule_decl .

    $default  reduce using rule 60 (rule_event)


state 51

   81 statement_decl: TOK_SEMICOLON .

    $default  reduce using rule 81 (statement_decl)


state 52

  100 compound_statement_decl: TOK_LBRACE . statement_decl_list TOK_RBRACE

    TOK_SEMICOLON  shift, and go to state 51
    TOK_LBRACE     shift, and go to state 52
    TOK_IF         shift, and go to state 53
    TOK_RETURN     shift, and go to state 54
    TOK_IDENT      shift, and go to state 55

    assignment_decl          go to state 56
    statement_decl           go to state 81
    statement_decl_list      go to state 82
    function_invocation      go to state 58
    only_if_without_else     go to state 59
    compound_statement_decl  go to state 60
    compound_statement_star  go to state 61
    ref_exp                  go to state 62


state 53

   99 only_if_without_else: TOK_IF . exp statement_decl

    TOK_MINUS      shift, and go to state 83
    TOK_BITNOT     shift, and go to state 84
    TOK_NOT        shift, and go to state 85
    TOK_LPAREN     shift, and go to state 86
    TOK_UINTNUM    shift, and go to state 87
    TOK_DOUBLENUM  shift, and go to state 88
    TOK_STRCONST   shift, and go to state 89
    TOK_TRUE       shift, and go to state 90
    TOK_FALSE      shift, and go to state 91
    TOK_IDENT      shift, and go to state 55

    integer_literal_decl  go to state 92
    double_literal_decl   go to state 93
    bool_literal_decl     go to state 94
    str_const_decl        go to state 95
    literal_decl          go to state 96
    literal_prt           go to state 97
    assignment_decl       go to state 98
    exp                   go to state 99
    function_invocation   go to state 100
    ref_exp               go to state 101


state 54

   86 statement_decl: TOK_RETURN . exp TOK_SEMICOLON

    TOK_MINUS      shift, and go to state 83
    TOK_BITNOT     shift, and go to state 84
    TOK_NOT        shift, and go to state 85
    TOK_LPAREN     shift, and go to state 86
    TOK_UINTNUM    shift, and go to state 87
    TOK_DOUBLENUM  shift, and go to state 88
    TOK_STRCONST   shift, and go to state 89
    TOK_TRUE       shift, and go to state 90
    TOK_FALSE      shift, and go to state 91
    TOK_IDENT      shift, and go to state 55

    integer_literal_decl  go to state 92
    double_literal_decl   go to state 93
    bool_literal_decl     go to state 94
    str_const_decl        go to state 95
    literal_decl          go to state 96
    literal_prt           go to state 97
    assignment_decl       go to state 98
    exp                   go to state 102
    function_invocation   go to state 100
    ref_exp               go to state 101


state 55

   90 function_invocation: TOK_IDENT . function_invocation_list
  103 ref_exp: TOK_IDENT .

    TOK_LPAREN  shift, and go to state 103

    $default  reduce using rule 103 (ref_exp)

    function_invocation_list  go to state 104


state 56

   85 statement_decl: assignment_decl . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 105


state 57

   61 rule_decl: rule statement_decl .

    $default  reduce using rule 61 (rule_decl)


state 58

   84 statement_decl: function_invocation . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 106


state 59

   82 statement_decl: only_if_without_else .
   83               | only_if_without_else . TOK_ELSE statement_decl

    TOK_ELSE  shift, and go to state 107

    $default  reduce using rule 82 (statement_decl)


state 60

  101 compound_statement_star: compound_statement_decl .
  102                        | compound_statement_decl . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 108

    $default  reduce using rule 101 (compound_statement_star)


state 61

   87 statement_decl: compound_statement_star .

    $default  reduce using rule 87 (statement_decl)


state 62

   31 assignment_decl: ref_exp . TOK_ASSIGN exp

    TOK_ASSIGN  shift, and go to state 109


state 63

   64 event_pattern: event_pattern TOK_PAT_STAR .

    $default  reduce using rule 64 (event_pattern)


state 64

   66 event_pattern: event_pattern TOK_PAT_OR . event_pattern

    TOK_NOT     shift, and go to state 5
    TOK_LPAREN  shift, and go to state 7
    TOK_ANY     shift, and go to state 10
    TOK_IDENT   shift, and go to state 39

    event_pattern      go to state 110
    primitive_pattern  go to state 28
    pattern_type       go to state 29
    any_event          go to state 30
    normal_event       go to state 33


state 65

   67 event_pattern: event_pattern TOK_COLON . event_pattern

    TOK_NOT     shift, and go to state 5
    TOK_LPAREN  shift, and go to state 7
    TOK_ANY     shift, and go to state 10
    TOK_IDENT   shift, and go to state 39

    event_pattern      go to state 111
    primitive_pattern  go to state 28
    pattern_type       go to state 29
    any_event          go to state 30
    normal_event       go to state 33


state 66

   62 rule: event_pattern TOK_ARROW .

    $default  reduce using rule 62 (rule)


state 67

   70 primitive_pattern: pattern_type TOK_BITOR . exp

    TOK_MINUS      shift, and go to state 83
    TOK_BITNOT     shift, and go to state 84
    TOK_NOT        shift, and go to state 85
    TOK_LPAREN     shift, and go to state 86
    TOK_UINTNUM    shift, and go to state 87
    TOK_DOUBLENUM  shift, and go to state 88
    TOK_STRCONST   shift, and go to state 89
    TOK_TRUE       shift, and go to state 90
    TOK_FALSE      shift, and go to state 91
    TOK_IDENT      shift, and go to state 55

    integer_literal_decl  go to state 92
    double_literal_decl   go to state 93
    bool_literal_decl     go to state 94
    str_const_decl        go to state 95
    literal_decl          go to state 96
    literal_prt           go to state 97
    assignment_decl       go to state 98
    exp                   go to state 112
    function_invocation   go to state 100
    ref_exp               go to state 101


state 68

  116 formal_param_list_decl: TOK_LPAREN . param_list_star TOK_RPAREN

    TOK_VOID      shift, and go to state 11
    TOK_STRING    shift, and go to state 12
    TOK_INT       shift, and go to state 13
    TOK_UNSIGNED  shift, and go to state 14
    TOK_BOOL      shift, and go to state 15
    TOK_BYTE      shift, and go to state 16
    TOK_DOUBLE    shift, and go to state 17
    TOK_IDENT     shift, and go to state 113

    $default  reduce using rule 111 (param_list_star)

    base_type        go to state 21
    type_decl        go to state 114
    param_list_star  go to state 115
    param_list       go to state 116
    param_decl       go to state 117


state 69

   75 event_decl: event_decl_hdr formal_param_list_decl . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 118


state 70

  118 function_decl_only: function_header formal_param_list_decl .

    $default  reduce using rule 118 (function_decl_only)


state 71

  119 function_decl: function_decl_only TOK_SEMICOLON .

    $default  reduce using rule 119 (function_decl)


state 72

   98 function_body_invoc: TOK_LBRACE . function_body_decl TOK_RBRACE

    TOK_SEMICOLON  shift, and go to state 51
    TOK_LBRACE     shift, and go to state 52
    TOK_IF         shift, and go to state 53
    TOK_RETURN     shift, and go to state 54
    TOK_VOID       shift, and go to state 11
    TOK_STRING     shift, and go to state 12
    TOK_INT        shift, and go to state 13
    TOK_UNSIGNED   shift, and go to state 14
    TOK_BOOL       shift, and go to state 15
    TOK_BYTE       shift, and go to state 16
    TOK_DOUBLE     shift, and go to state 17
    TOK_IDENT      shift, and go to state 119

    base_type                go to state 21
    type_decl                go to state 120
    assignment_decl          go to state 56
    statement_decl           go to state 81
    statement_decl_list      go to state 121
    function_invocation      go to state 58
    function_body_decl       go to state 122
    only_if_without_else     go to state 59
    compound_statement_decl  go to state 60
    compound_statement_star  go to state 61
    ref_exp                  go to state 62
    variable_decl            go to state 123
    variable_decl_list       go to state 124


state 73

  120 function_decl: function_decl_only function_body_invoc .

    $default  reduce using rule 120 (function_decl)


state 74

   68 event_pattern: TOK_LPAREN event_pattern TOK_RPAREN .

    $default  reduce using rule 68 (event_pattern)


state 75

   79 event_param_list: TOK_IDENT .

    $default  reduce using rule 79 (event_param_list)


state 76

   76 normal_event: TOK_IDENT TOK_LPAREN event_param_list_star . TOK_RPAREN

    TOK_RPAREN  shift, and go to state 125


state 77

   78 event_param_list_star: event_param_list .
   80 event_param_list: event_param_list . TOK_COMMA TOK_IDENT

    TOK_COMMA  shift, and go to state 126

    $default  reduce using rule 78 (event_param_list_star)


state 78

  105 variable_name: TOK_IDENT TOK_ASSIGN . exp

    TOK_MINUS      shift, and go to state 83
    TOK_BITNOT     shift, and go to state 84
    TOK_NOT        shift, and go to state 85
    TOK_LPAREN     shift, and go to state 86
    TOK_UINTNUM    shift, and go to state 87
    TOK_DOUBLENUM  shift, and go to state 88
    TOK_STRCONST   shift, and go to state 89
    TOK_TRUE       shift, and go to state 90
    TOK_FALSE      shift, and go to state 91
    TOK_IDENT      shift, and go to state 55

    integer_literal_decl  go to state 92
    double_literal_decl   go to state 93
    bool_literal_decl     go to state 94
    str_const_decl        go to state 95
    literal_decl          go to state 96
    literal_prt           go to state 97
    assignment_decl       go to state 98
    exp                   go to state 127
    function_invocation   go to state 100
    ref_exp               go to state 101


state 79

  107 variable_name_decl: variable_name_decl TOK_COMMA . variable_name

    TOK_IDENT  shift, and go to state 128

    variable_name  go to state 129


state 80

  108 variable_decl: type_decl variable_name_decl TOK_SEMICOLON .

    $default  reduce using rule 108 (variable_decl)


state 81

   88 statement_decl_list: statement_decl .

    $default  reduce using rule 88 (statement_decl_list)


state 82

   89 statement_decl_list: statement_decl_list . statement_decl
  100 compound_statement_decl: TOK_LBRACE statement_decl_list . TOK_RBRACE

    TOK_SEMICOLON  shift, and go to state 51
    TOK_LBRACE     shift, and go to state 52
    TOK_RBRACE     shift, and go to state 130
    TOK_IF         shift, and go to state 53
    TOK_RETURN     shift, and go to state 54
    TOK_IDENT      shift, and go to state 55

    assignment_decl          go to state 56
    statement_decl           go to state 131
    function_invocation      go to state 58
    only_if_without_else     go to state 59
    compound_statement_decl  go to state 60
    compound_statement_star  go to state 61
    ref_exp                  go to state 62


state 83

   55 exp: TOK_MINUS . exp

    TOK_MINUS      shift, and go to state 83
    TOK_BITNOT     shift, and go to state 84
    TOK_NOT        shift, and go to state 85
    TOK_LPAREN     shift, and go to state 86
    TOK_UINTNUM    shift, and go to state 87
    TOK_DOUBLENUM  shift, and go to state 88
    TOK_STRCONST   shift, and go to state 89
    TOK_TRUE       shift, and go to state 90
    TOK_FALSE      shift, and go to state 91
    TOK_IDENT      shift, and go to state 55

    integer_literal_decl  go to state 92
    double_literal_decl   go to state 93
    bool_literal_decl     go to state 94
    str_const_decl        go to state 95
    literal_decl          go to state 96
    literal_prt           go to state 97
    assignment_decl       go to state 98
    exp                   go to state 132
    function_invocation   go to state 100
    ref_exp               go to state 101


state 84

   54 exp: TOK_BITNOT . exp

    TOK_MINUS      shift, and go to state 83
    TOK_BITNOT     shift, and go to state 84
    TOK_NOT        shift, and go to state 85
    TOK_LPAREN     shift, and go to state 86
    TOK_UINTNUM    shift, and go to state 87
    TOK_DOUBLENUM  shift, and go to state 88
    TOK_STRCONST   shift, and go to state 89
    TOK_TRUE       shift, and go to state 90
    TOK_FALSE      shift, and go to state 91
    TOK_IDENT      shift, and go to state 55

    integer_literal_decl  go to state 92
    double_literal_decl   go to state 93
    bool_literal_decl     go to state 94
    str_const_decl        go to state 95
    literal_decl          go to state 96
    literal_prt           go to state 97
    assignment_decl       go to state 98
    exp                   go to state 133
    function_invocation   go to state 100
    ref_exp               go to state 101


state 85

   56 exp: TOK_NOT . exp

    TOK_MINUS      shift, and go to state 83
    TOK_BITNOT     shift, and go to state 84
    TOK_NOT        shift, and go to state 85
    TOK_LPAREN     shift, and go to state 86
    TOK_UINTNUM    shift, and go to state 87
    TOK_DOUBLENUM  shift, and go to state 88
    TOK_STRCONST   shift, and go to state 89
    TOK_TRUE       shift, and go to state 90
    TOK_FALSE      shift, and go to state 91
    TOK_IDENT      shift, and go to state 55

    integer_literal_decl  go to state 92
    double_literal_decl   go to state 93
    bool_literal_decl     go to state 94
    str_const_decl        go to state 95
    literal_decl          go to state 96
    literal_prt           go to state 97
    assignment_decl       go to state 98
    exp                   go to state 134
    function_invocation   go to state 100
    ref_exp               go to state 101


state 86

   57 exp: TOK_LPAREN . exp TOK_RPAREN

    TOK_MINUS      shift, and go to state 83
    TOK_BITNOT     shift, and go to state 84
    TOK_NOT        shift, and go to state 85
    TOK_LPAREN     shift, and go to state 86
    TOK_UINTNUM    shift, and go to state 87
    TOK_DOUBLENUM  shift, and go to state 88
    TOK_STRCONST   shift, and go to state 89
    TOK_TRUE       shift, and go to state 90
    TOK_FALSE      shift, and go to state 91
    TOK_IDENT      shift, and go to state 55

    integer_literal_decl  go to state 92
    double_literal_decl   go to state 93
    bool_literal_decl     go to state 94
    str_const_decl        go to state 95
    literal_decl          go to state 96
    literal_prt           go to state 97
    assignment_decl       go to state 98
    exp                   go to state 135
    function_invocation   go to state 100
    ref_exp               go to state 101


state 87

   21 integer_literal_decl: TOK_UINTNUM .

    $default  reduce using rule 21 (integer_literal_decl)


state 88

   22 double_literal_decl: TOK_DOUBLENUM .

    $default  reduce using rule 22 (double_literal_decl)


state 89

   25 str_const_decl: TOK_STRCONST .

    $default  reduce using rule 25 (str_const_decl)


state 90

   23 bool_literal_decl: TOK_TRUE .

    $default  reduce using rule 23 (bool_literal_decl)


state 91

   24 bool_literal_decl: TOK_FALSE .

    $default  reduce using rule 24 (bool_literal_decl)


state 92

   26 literal_decl: integer_literal_decl .

    $default  reduce using rule 26 (literal_decl)


state 93

   27 literal_decl: double_literal_decl .

    $default  reduce using rule 27 (literal_decl)


state 94

   29 literal_decl: bool_literal_decl .

    $default  reduce using rule 29 (literal_decl)


state 95

   28 literal_decl: str_const_decl .

    $default  reduce using rule 28 (literal_decl)


state 96

   30 literal_prt: literal_decl .

    $default  reduce using rule 30 (literal_prt)


state 97

   32 exp: literal_prt .

    $default  reduce using rule 32 (exp)


state 98

   34 exp: assignment_decl .

    $default  reduce using rule 34 (exp)


state 99

   36 exp: exp . TOK_PLUS exp
   37    | exp . TOK_MINUS exp
   38    | exp . TOK_MULT exp
   39    | exp . TOK_DIV exp
   40    | exp . TOK_AND exp
   41    | exp . TOK_BITAND exp
   42    | exp . TOK_BITOR exp
   43    | exp . TOK_GT exp
   44    | exp . TOK_GE exp
   45    | exp . TOK_LT exp
   46    | exp . TOK_LE exp
   47    | exp . TOK_OR exp
   48    | exp . TOK_SHL exp
   49    | exp . TOK_SHR exp
   50    | exp . TOK_BITXOR exp
   51    | exp . TOK_MOD exp
   52    | exp . TOK_EQ exp
   53    | exp . TOK_NE exp
   99 only_if_without_else: TOK_IF exp . statement_decl

    TOK_PLUS       shift, and go to state 136
    TOK_MINUS      shift, and go to state 137
    TOK_MULT       shift, and go to state 138
    TOK_DIV        shift, and go to state 139
    TOK_MOD        shift, and go to state 140
    TOK_BITAND     shift, and go to state 141
    TOK_BITOR      shift, and go to state 142
    TOK_BITXOR     shift, and go to state 143
    TOK_SHL        shift, and go to state 144
    TOK_SHR        shift, and go to state 145
    TOK_GT         shift, and go to state 146
    TOK_LT         shift, and go to state 147
    TOK_GE         shift, and go to state 148
    TOK_LE         shift, and go to state 149
    TOK_EQ         shift, and go to state 150
    TOK_NE         shift, and go to state 151
    TOK_AND        shift, and go to state 152
    TOK_OR         shift, and go to state 153
    TOK_SEMICOLON  shift, and go to state 51
    TOK_LBRACE     shift, and go to state 52
    TOK_IF         shift, and go to state 53
    TOK_RETURN     shift, and go to state 54
    TOK_IDENT      shift, and go to state 55

    assignment_decl          go to state 56
    statement_decl           go to state 154
    function_invocation      go to state 58
    only_if_without_else     go to state 59
    compound_statement_decl  go to state 60
    compound_statement_star  go to state 61
    ref_exp                  go to state 62


state 100

   35 exp: function_invocation .

    $default  reduce using rule 35 (exp)


state 101

   31 assignment_decl: ref_exp . TOK_ASSIGN exp
   33 exp: ref_exp .

    TOK_ASSIGN  shift, and go to state 109

    $default  reduce using rule 33 (exp)


state 102

   36 exp: exp . TOK_PLUS exp
   37    | exp . TOK_MINUS exp
   38    | exp . TOK_MULT exp
   39    | exp . TOK_DIV exp
   40    | exp . TOK_AND exp
   41    | exp . TOK_BITAND exp
   42    | exp . TOK_BITOR exp
   43    | exp . TOK_GT exp
   44    | exp . TOK_GE exp
   45    | exp . TOK_LT exp
   46    | exp . TOK_LE exp
   47    | exp . TOK_OR exp
   48    | exp . TOK_SHL exp
   49    | exp . TOK_SHR exp
   50    | exp . TOK_BITXOR exp
   51    | exp . TOK_MOD exp
   52    | exp . TOK_EQ exp
   53    | exp . TOK_NE exp
   86 statement_decl: TOK_RETURN exp . TOK_SEMICOLON

    TOK_PLUS       shift, and go to state 136
    TOK_MINUS      shift, and go to state 137
    TOK_MULT       shift, and go to state 138
    TOK_DIV        shift, and go to state 139
    TOK_MOD        shift, and go to state 140
    TOK_BITAND     shift, and go to state 141
    TOK_BITOR      shift, and go to state 142
    TOK_BITXOR     shift, and go to state 143
    TOK_SHL        shift, and go to state 144
    TOK_SHR        shift, and go to state 145
    TOK_GT         shift, and go to state 146
    TOK_LT         shift, and go to state 147
    TOK_GE         shift, and go to state 148
    TOK_LE         shift, and go to state 149
    TOK_EQ         shift, and go to state 150
    TOK_NE         shift, and go to state 151
    TOK_AND        shift, and go to state 152
    TOK_OR         shift, and go to state 153
    TOK_SEMICOLON  shift, and go to state 155


state 103

   95 function_invocation_list: TOK_LPAREN . function_list TOK_RPAREN

    TOK_MINUS      shift, and go to state 83
    TOK_BITNOT     shift, and go to state 84
    TOK_NOT        shift, and go to state 85
    TOK_LPAREN     shift, and go to state 86
    TOK_UINTNUM    shift, and go to state 87
    TOK_DOUBLENUM  shift, and go to state 88
    TOK_STRCONST   shift, and go to state 89
    TOK_TRUE       shift, and go to state 90
    TOK_FALSE      shift, and go to state 91
    TOK_IDENT      shift, and go to state 55

    $default  reduce using rule 93 (function_list)

    integer_literal_decl  go to state 92
    double_literal_decl   go to state 93
    bool_literal_decl     go to state 94
    str_const_decl        go to state 95
    literal_decl          go to state 96
    literal_prt           go to state 97
    assignment_decl       go to state 98
    exp                   go to state 156
    function_invocation   go to state 100
    inside_function       go to state 157
    function_list         go to state 158
    ref_exp               go to state 101


state 104

   90 function_invocation: TOK_IDENT function_invocation_list .

    $default  reduce using rule 90 (function_invocation)


state 105

   85 statement_decl: assignment_decl TOK_SEMICOLON .

    $default  reduce using rule 85 (statement_decl)


state 106

   84 statement_decl: function_invocation TOK_SEMICOLON .

    $default  reduce using rule 84 (statement_decl)


state 107

   83 statement_decl: only_if_without_else TOK_ELSE . statement_decl

    TOK_SEMICOLON  shift, and go to state 51
    TOK_LBRACE     shift, and go to state 52
    TOK_IF         shift, and go to state 53
    TOK_RETURN     shift, and go to state 54
    TOK_IDENT      shift, and go to state 55

    assignment_decl          go to state 56
    statement_decl           go to state 159
    function_invocation      go to state 58
    only_if_without_else     go to state 59
    compound_statement_decl  go to state 60
    compound_statement_star  go to state 61
    ref_exp                  go to state 62


state 108

  102 compound_statement_star: compound_statement_decl TOK_SEMICOLON .

    $default  reduce using rule 102 (compound_statement_star)


state 109

   31 assignment_decl: ref_exp TOK_ASSIGN . exp

    TOK_MINUS      shift, and go to state 83
    TOK_BITNOT     shift, and go to state 84
    TOK_NOT        shift, and go to state 85
    TOK_LPAREN     shift, and go to state 86
    TOK_UINTNUM    shift, and go to state 87
    TOK_DOUBLENUM  shift, and go to state 88
    TOK_STRCONST   shift, and go to state 89
    TOK_TRUE       shift, and go to state 90
    TOK_FALSE      shift, and go to state 91
    TOK_IDENT      shift, and go to state 55

    integer_literal_decl  go to state 92
    double_literal_decl   go to state 93
    bool_literal_decl     go to state 94
    str_const_decl        go to state 95
    literal_decl          go to state 96
    literal_prt           go to state 97
    assignment_decl       go to state 98
    exp                   go to state 160
    function_invocation   go to state 100
    ref_exp               go to state 101


state 110

   64 event_pattern: event_pattern . TOK_PAT_STAR
   66              | event_pattern . TOK_PAT_OR event_pattern
   66              | event_pattern TOK_PAT_OR event_pattern .
   67              | event_pattern . TOK_COLON event_pattern

    TOK_PAT_STAR  shift, and go to state 63
    TOK_COLON     shift, and go to state 65

    $default  reduce using rule 66 (event_pattern)


state 111

   64 event_pattern: event_pattern . TOK_PAT_STAR
   66              | event_pattern . TOK_PAT_OR event_pattern
   67              | event_pattern . TOK_COLON event_pattern
   67              | event_pattern TOK_COLON event_pattern .

    TOK_PAT_STAR  shift, and go to state 63

    $default  reduce using rule 67 (event_pattern)


state 112

   36 exp: exp . TOK_PLUS exp
   37    | exp . TOK_MINUS exp
   38    | exp . TOK_MULT exp
   39    | exp . TOK_DIV exp
   40    | exp . TOK_AND exp
   41    | exp . TOK_BITAND exp
   42    | exp . TOK_BITOR exp
   43    | exp . TOK_GT exp
   44    | exp . TOK_GE exp
   45    | exp . TOK_LT exp
   46    | exp . TOK_LE exp
   47    | exp . TOK_OR exp
   48    | exp . TOK_SHL exp
   49    | exp . TOK_SHR exp
   50    | exp . TOK_BITXOR exp
   51    | exp . TOK_MOD exp
   52    | exp . TOK_EQ exp
   53    | exp . TOK_NE exp
   70 primitive_pattern: pattern_type TOK_BITOR exp .

    TOK_PLUS    shift, and go to state 136
    TOK_MINUS   shift, and go to state 137
    TOK_MULT    shift, and go to state 138
    TOK_DIV     shift, and go to state 139
    TOK_MOD     shift, and go to state 140
    TOK_BITAND  shift, and go to state 141
    TOK_BITOR   shift, and go to state 142
    TOK_BITXOR  shift, and go to state 143
    TOK_SHL     shift, and go to state 144
    TOK_SHR     shift, and go to state 145
    TOK_GT      shift, and go to state 146
    TOK_LT      shift, and go to state 147
    TOK_GE      shift, and go to state 148
    TOK_LE      shift, and go to state 149
    TOK_EQ      shift, and go to state 150
    TOK_NE      shift, and go to state 151
    TOK_AND     shift, and go to state 152
    TOK_OR      shift, and go to state 153

    $default  reduce using rule 70 (primitive_pattern)


state 113

   19 base_type: TOK_IDENT .

    $default  reduce using rule 19 (base_type)


state 114

  115 param_decl: type_decl . TOK_IDENT

    TOK_IDENT  shift, and go to state 161


state 115

  116 formal_param_list_decl: TOK_LPAREN param_list_star . TOK_RPAREN

    TOK_RPAREN  shift, and go to state 162


state 116

  112 param_list_star: param_list .
  114 param_list: param_list . TOK_COMMA param_decl

    TOK_COMMA  shift, and go to state 163

    $default  reduce using rule 112 (param_list_star)


state 117

  113 param_list: param_decl .

    $default  reduce using rule 113 (param_list)


state 118

   75 event_decl: event_decl_hdr formal_param_list_decl TOK_SEMICOLON .

    $default  reduce using rule 75 (event_decl)


state 119

   19 base_type: TOK_IDENT .
   90 function_invocation: TOK_IDENT . function_invocation_list
  103 ref_exp: TOK_IDENT .

    TOK_LPAREN  shift, and go to state 103

    TOK_ASSIGN  reduce using rule 103 (ref_exp)
    $default    reduce using rule 19 (base_type)

    function_invocation_list  go to state 104


state 120

  108 variable_decl: type_decl . variable_name_decl TOK_SEMICOLON

    TOK_IDENT  shift, and go to state 128

    variable_name       go to state 48
    variable_name_decl  go to state 49


state 121

   89 statement_decl_list: statement_decl_list . statement_decl
   97 function_body_decl: statement_decl_list .

    TOK_SEMICOLON  shift, and go to state 51
    TOK_LBRACE     shift, and go to state 52
    TOK_IF         shift, and go to state 53
    TOK_RETURN     shift, and go to state 54
    TOK_IDENT      shift, and go to state 55

    $default  reduce using rule 97 (function_body_decl)

    assignment_decl          go to state 56
    statement_decl           go to state 131
    function_invocation      go to state 58
    only_if_without_else     go to state 59
    compound_statement_decl  go to state 60
    compound_statement_star  go to state 61
    ref_exp                  go to state 62


state 122

   98 function_body_invoc: TOK_LBRACE function_body_decl . TOK_RBRACE

    TOK_RBRACE  shift, and go to state 164


state 123

  109 variable_decl_list: variable_decl .

    $default  reduce using rule 109 (variable_decl_list)


state 124

   96 function_body_decl: variable_decl_list . statement_decl_list
  110 variable_decl_list: variable_decl_list . variable_decl

    TOK_SEMICOLON  shift, and go to state 51
    TOK_LBRACE     shift, and go to state 52
    TOK_IF         shift, and go to state 53
    TOK_RETURN     shift, and go to state 54
    TOK_VOID       shift, and go to state 11
    TOK_STRING     shift, and go to state 12
    TOK_INT        shift, and go to state 13
    TOK_UNSIGNED   shift, and go to state 14
    TOK_BOOL       shift, and go to state 15
    TOK_BYTE       shift, and go to state 16
    TOK_DOUBLE     shift, and go to state 17
    TOK_IDENT      shift, and go to state 119

    base_type                go to state 21
    type_decl                go to state 120
    assignment_decl          go to state 56
    statement_decl           go to state 81
    statement_decl_list      go to state 165
    function_invocation      go to state 58
    only_if_without_else     go to state 59
    compound_statement_decl  go to state 60
    compound_statement_star  go to state 61
    ref_exp                  go to state 62
    variable_decl            go to state 166


state 125

   76 normal_event: TOK_IDENT TOK_LPAREN event_param_list_star TOK_RPAREN .

    $default  reduce using rule 76 (normal_event)


state 126

   80 event_param_list: event_param_list TOK_COMMA . TOK_IDENT

    TOK_IDENT  shift, and go to state 167


state 127

   36 exp: exp . TOK_PLUS exp
   37    | exp . TOK_MINUS exp
   38    | exp . TOK_MULT exp
   39    | exp . TOK_DIV exp
   40    | exp . TOK_AND exp
   41    | exp . TOK_BITAND exp
   42    | exp . TOK_BITOR exp
   43    | exp . TOK_GT exp
   44    | exp . TOK_GE exp
   45    | exp . TOK_LT exp
   46    | exp . TOK_LE exp
   47    | exp . TOK_OR exp
   48    | exp . TOK_SHL exp
   49    | exp . TOK_SHR exp
   50    | exp . TOK_BITXOR exp
   51    | exp . TOK_MOD exp
   52    | exp . TOK_EQ exp
   53    | exp . TOK_NE exp
  105 variable_name: TOK_IDENT TOK_ASSIGN exp .

    TOK_PLUS    shift, and go to state 136
    TOK_MINUS   shift, and go to state 137
    TOK_MULT    shift, and go to state 138
    TOK_DIV     shift, and go to state 139
    TOK_MOD     shift, and go to state 140
    TOK_BITAND  shift, and go to state 141
    TOK_BITOR   shift, and go to state 142
    TOK_BITXOR  shift, and go to state 143
    TOK_SHL     shift, and go to state 144
    TOK_SHR     shift, and go to state 145
    TOK_GT      shift, and go to state 146
    TOK_LT      shift, and go to state 147
    TOK_GE      shift, and go to state 148
    TOK_LE      shift, and go to state 149
    TOK_EQ      shift, and go to state 150
    TOK_NE      shift, and go to state 151
    TOK_AND     shift, and go to state 152
    TOK_OR      shift, and go to state 153

    $default  reduce using rule 105 (variable_name)


state 128

  104 variable_name: TOK_IDENT .
  105              | TOK_IDENT . TOK_ASSIGN exp

    TOK_ASSIGN  shift, and go to state 78

    $default  reduce using rule 104 (variable_name)


state 129

  107 variable_name_decl: variable_name_decl TOK_COMMA variable_name .

    $default  reduce using rule 107 (variable_name_decl)


state 130

  100 compound_statement_decl: TOK_LBRACE statement_decl_list TOK_RBRACE .

    $default  reduce using rule 100 (compound_statement_decl)


state 131

   89 statement_decl_list: statement_decl_list statement_decl .

    $default  reduce using rule 89 (statement_decl_list)


state 132

   36 exp: exp . TOK_PLUS exp
   37    | exp . TOK_MINUS exp
   38    | exp . TOK_MULT exp
   39    | exp . TOK_DIV exp
   40    | exp . TOK_AND exp
   41    | exp . TOK_BITAND exp
   42    | exp . TOK_BITOR exp
   43    | exp . TOK_GT exp
   44    | exp . TOK_GE exp
   45    | exp . TOK_LT exp
   46    | exp . TOK_LE exp
   47    | exp . TOK_OR exp
   48    | exp . TOK_SHL exp
   49    | exp . TOK_SHR exp
   50    | exp . TOK_BITXOR exp
   51    | exp . TOK_MOD exp
   52    | exp . TOK_EQ exp
   53    | exp . TOK_NE exp
   55    | TOK_MINUS exp .

    TOK_MULT  shift, and go to state 138
    TOK_DIV   shift, and go to state 139
    TOK_MOD   shift, and go to state 140

    $default  reduce using rule 55 (exp)


state 133

   36 exp: exp . TOK_PLUS exp
   37    | exp . TOK_MINUS exp
   38    | exp . TOK_MULT exp
   39    | exp . TOK_DIV exp
   40    | exp . TOK_AND exp
   41    | exp . TOK_BITAND exp
   42    | exp . TOK_BITOR exp
   43    | exp . TOK_GT exp
   44    | exp . TOK_GE exp
   45    | exp . TOK_LT exp
   46    | exp . TOK_LE exp
   47    | exp . TOK_OR exp
   48    | exp . TOK_SHL exp
   49    | exp . TOK_SHR exp
   50    | exp . TOK_BITXOR exp
   51    | exp . TOK_MOD exp
   52    | exp . TOK_EQ exp
   53    | exp . TOK_NE exp
   54    | TOK_BITNOT exp .

    TOK_PLUS   shift, and go to state 136
    TOK_MINUS  shift, and go to state 137
    TOK_MULT   shift, and go to state 138
    TOK_DIV    shift, and go to state 139
    TOK_MOD    shift, and go to state 140
    TOK_SHL    shift, and go to state 144
    TOK_SHR    shift, and go to state 145

    $default  reduce using rule 54 (exp)


state 134

   36 exp: exp . TOK_PLUS exp
   37    | exp . TOK_MINUS exp
   38    | exp . TOK_MULT exp
   39    | exp . TOK_DIV exp
   40    | exp . TOK_AND exp
   41    | exp . TOK_BITAND exp
   42    | exp . TOK_BITOR exp
   43    | exp . TOK_GT exp
   44    | exp . TOK_GE exp
   45    | exp . TOK_LT exp
   46    | exp . TOK_LE exp
   47    | exp . TOK_OR exp
   48    | exp . TOK_SHL exp
   49    | exp . TOK_SHR exp
   50    | exp . TOK_BITXOR exp
   51    | exp . TOK_MOD exp
   52    | exp . TOK_EQ exp
   53    | exp . TOK_NE exp
   56    | TOK_NOT exp .

    TOK_PLUS    shift, and go to state 136
    TOK_MINUS   shift, and go to state 137
    TOK_MULT    shift, and go to state 138
    TOK_DIV     shift, and go to state 139
    TOK_MOD     shift, and go to state 140
    TOK_BITAND  shift, and go to state 141
    TOK_BITOR   shift, and go to state 142
    TOK_BITXOR  shift, and go to state 143
    TOK_SHL     shift, and go to state 144
    TOK_SHR     shift, and go to state 145
    TOK_GT      shift, and go to state 146
    TOK_LT      shift, and go to state 147
    TOK_GE      shift, and go to state 148
    TOK_LE      shift, and go to state 149
    TOK_EQ      shift, and go to state 150
    TOK_NE      shift, and go to state 151

    $default  reduce using rule 56 (exp)


state 135

   36 exp: exp . TOK_PLUS exp
   37    | exp . TOK_MINUS exp
   38    | exp . TOK_MULT exp
   39    | exp . TOK_DIV exp
   40    | exp . TOK_AND exp
   41    | exp . TOK_BITAND exp
   42    | exp . TOK_BITOR exp
   43    | exp . TOK_GT exp
   44    | exp . TOK_GE exp
   45    | exp . TOK_LT exp
   46    | exp . TOK_LE exp
   47    | exp . TOK_OR exp
   48    | exp . TOK_SHL exp
   49    | exp . TOK_SHR exp
   50    | exp . TOK_BITXOR exp
   51    | exp . TOK_MOD exp
   52    | exp . TOK_EQ exp
   53    | exp . TOK_NE exp
   57    | TOK_LPAREN exp . TOK_RPAREN

    TOK_PLUS    shift, and go to state 136
    TOK_MINUS   shift, and go to state 137
    TOK_MULT    shift, and go to state 138
    TOK_DIV     shift, and go to state 139
    TOK_MOD     shift, and go to state 140
    TOK_BITAND  shift, and go to state 141
    TOK_BITOR   shift, and go to state 142
    TOK_BITXOR  shift, and go to state 143
    TOK_SHL     shift, and go to state 144
    TOK_SHR     shift, and go to state 145
    TOK_GT      shift, and go to state 146
    TOK_LT      shift, and go to state 147
    TOK_GE      shift, and go to state 148
    TOK_LE      shift, and go to state 149
    TOK_EQ      shift, and go to state 150
    TOK_NE      shift, and go to state 151
    TOK_AND     shift, and go to state 152
    TOK_OR      shift, and go to state 153
    TOK_RPAREN  shift, and go to state 168


state 136

   36 exp: exp TOK_PLUS . exp

    TOK_MINUS      shift, and go to state 83
    TOK_BITNOT     shift, and go to state 84
    TOK_NOT        shift, and go to state 85
    TOK_LPAREN     shift, and go to state 86
    TOK_UINTNUM    shift, and go to state 87
    TOK_DOUBLENUM  shift, and go to state 88
    TOK_STRCONST   shift, and go to state 89
    TOK_TRUE       shift, and go to state 90
    TOK_FALSE      shift, and go to state 91
    TOK_IDENT      shift, and go to state 55

    integer_literal_decl  go to state 92
    double_literal_decl   go to state 93
    bool_literal_decl     go to state 94
    str_const_decl        go to state 95
    literal_decl          go to state 96
    literal_prt           go to state 97
    assignment_decl       go to state 98
    exp                   go to state 169
    function_invocation   go to state 100
    ref_exp               go to state 101


state 137

   37 exp: exp TOK_MINUS . exp

    TOK_MINUS      shift, and go to state 83
    TOK_BITNOT     shift, and go to state 84
    TOK_NOT        shift, and go to state 85
    TOK_LPAREN     shift, and go to state 86
    TOK_UINTNUM    shift, and go to state 87
    TOK_DOUBLENUM  shift, and go to state 88
    TOK_STRCONST   shift, and go to state 89
    TOK_TRUE       shift, and go to state 90
    TOK_FALSE      shift, and go to state 91
    TOK_IDENT      shift, and go to state 55

    integer_literal_decl  go to state 92
    double_literal_decl   go to state 93
    bool_literal_decl     go to state 94
    str_const_decl        go to state 95
    literal_decl          go to state 96
    literal_prt           go to state 97
    assignment_decl       go to state 98
    exp                   go to state 170
    function_invocation   go to state 100
    ref_exp               go to state 101


state 138

   38 exp: exp TOK_MULT . exp

    TOK_MINUS      shift, and go to state 83
    TOK_BITNOT     shift, and go to state 84
    TOK_NOT        shift, and go to state 85
    TOK_LPAREN     shift, and go to state 86
    TOK_UINTNUM    shift, and go to state 87
    TOK_DOUBLENUM  shift, and go to state 88
    TOK_STRCONST   shift, and go to state 89
    TOK_TRUE       shift, and go to state 90
    TOK_FALSE      shift, and go to state 91
    TOK_IDENT      shift, and go to state 55

    integer_literal_decl  go to state 92
    double_literal_decl   go to state 93
    bool_literal_decl     go to state 94
    str_const_decl        go to state 95
    literal_decl          go to state 96
    literal_prt           go to state 97
    assignment_decl       go to state 98
    exp                   go to state 171
    function_invocation   go to state 100
    ref_exp               go to state 101


state 139

   39 exp: exp TOK_DIV . exp

    TOK_MINUS      shift, and go to state 83
    TOK_BITNOT     shift, and go to state 84
    TOK_NOT        shift, and go to state 85
    TOK_LPAREN     shift, and go to state 86
    TOK_UINTNUM    shift, and go to state 87
    TOK_DOUBLENUM  shift, and go to state 88
    TOK_STRCONST   shift, and go to state 89
    TOK_TRUE       shift, and go to state 90
    TOK_FALSE      shift, and go to state 91
    TOK_IDENT      shift, and go to state 55

    integer_literal_decl  go to state 92
    double_literal_decl   go to state 93
    bool_literal_decl     go to state 94
    str_const_decl        go to state 95
    literal_decl          go to state 96
    literal_prt           go to state 97
    assignment_decl       go to state 98
    exp                   go to state 172
    function_invocation   go to state 100
    ref_exp               go to state 101


state 140

   51 exp: exp TOK_MOD . exp

    TOK_MINUS      shift, and go to state 83
    TOK_BITNOT     shift, and go to state 84
    TOK_NOT        shift, and go to state 85
    TOK_LPAREN     shift, and go to state 86
    TOK_UINTNUM    shift, and go to state 87
    TOK_DOUBLENUM  shift, and go to state 88
    TOK_STRCONST   shift, and go to state 89
    TOK_TRUE       shift, and go to state 90
    TOK_FALSE      shift, and go to state 91
    TOK_IDENT      shift, and go to state 55

    integer_literal_decl  go to state 92
    double_literal_decl   go to state 93
    bool_literal_decl     go to state 94
    str_const_decl        go to state 95
    literal_decl          go to state 96
    literal_prt           go to state 97
    assignment_decl       go to state 98
    exp                   go to state 173
    function_invocation   go to state 100
    ref_exp               go to state 101


state 141

   41 exp: exp TOK_BITAND . exp

    TOK_MINUS      shift, and go to state 83
    TOK_BITNOT     shift, and go to state 84
    TOK_NOT        shift, and go to state 85
    TOK_LPAREN     shift, and go to state 86
    TOK_UINTNUM    shift, and go to state 87
    TOK_DOUBLENUM  shift, and go to state 88
    TOK_STRCONST   shift, and go to state 89
    TOK_TRUE       shift, and go to state 90
    TOK_FALSE      shift, and go to state 91
    TOK_IDENT      shift, and go to state 55

    integer_literal_decl  go to state 92
    double_literal_decl   go to state 93
    bool_literal_decl     go to state 94
    str_const_decl        go to state 95
    literal_decl          go to state 96
    literal_prt           go to state 97
    assignment_decl       go to state 98
    exp                   go to state 174
    function_invocation   go to state 100
    ref_exp               go to state 101


state 142

   42 exp: exp TOK_BITOR . exp

    TOK_MINUS      shift, and go to state 83
    TOK_BITNOT     shift, and go to state 84
    TOK_NOT        shift, and go to state 85
    TOK_LPAREN     shift, and go to state 86
    TOK_UINTNUM    shift, and go to state 87
    TOK_DOUBLENUM  shift, and go to state 88
    TOK_STRCONST   shift, and go to state 89
    TOK_TRUE       shift, and go to state 90
    TOK_FALSE      shift, and go to state 91
    TOK_IDENT      shift, and go to state 55

    integer_literal_decl  go to state 92
    double_literal_decl   go to state 93
    bool_literal_decl     go to state 94
    str_const_decl        go to state 95
    literal_decl          go to state 96
    literal_prt           go to state 97
    assignment_decl       go to state 98
    exp                   go to state 175
    function_invocation   go to state 100
    ref_exp               go to state 101


state 143

   50 exp: exp TOK_BITXOR . exp

    TOK_MINUS      shift, and go to state 83
    TOK_BITNOT     shift, and go to state 84
    TOK_NOT        shift, and go to state 85
    TOK_LPAREN     shift, and go to state 86
    TOK_UINTNUM    shift, and go to state 87
    TOK_DOUBLENUM  shift, and go to state 88
    TOK_STRCONST   shift, and go to state 89
    TOK_TRUE       shift, and go to state 90
    TOK_FALSE      shift, and go to state 91
    TOK_IDENT      shift, and go to state 55

    integer_literal_decl  go to state 92
    double_literal_decl   go to state 93
    bool_literal_decl     go to state 94
    str_const_decl        go to state 95
    literal_decl          go to state 96
    literal_prt           go to state 97
    assignment_decl       go to state 98
    exp                   go to state 176
    function_invocation   go to state 100
    ref_exp               go to state 101


state 144

   48 exp: exp TOK_SHL . exp

    TOK_MINUS      shift, and go to state 83
    TOK_BITNOT     shift, and go to state 84
    TOK_NOT        shift, and go to state 85
    TOK_LPAREN     shift, and go to state 86
    TOK_UINTNUM    shift, and go to state 87
    TOK_DOUBLENUM  shift, and go to state 88
    TOK_STRCONST   shift, and go to state 89
    TOK_TRUE       shift, and go to state 90
    TOK_FALSE      shift, and go to state 91
    TOK_IDENT      shift, and go to state 55

    integer_literal_decl  go to state 92
    double_literal_decl   go to state 93
    bool_literal_decl     go to state 94
    str_const_decl        go to state 95
    literal_decl          go to state 96
    literal_prt           go to state 97
    assignment_decl       go to state 98
    exp                   go to state 177
    function_invocation   go to state 100
    ref_exp               go to state 101


state 145

   49 exp: exp TOK_SHR . exp

    TOK_MINUS      shift, and go to state 83
    TOK_BITNOT     shift, and go to state 84
    TOK_NOT        shift, and go to state 85
    TOK_LPAREN     shift, and go to state 86
    TOK_UINTNUM    shift, and go to state 87
    TOK_DOUBLENUM  shift, and go to state 88
    TOK_STRCONST   shift, and go to state 89
    TOK_TRUE       shift, and go to state 90
    TOK_FALSE      shift, and go to state 91
    TOK_IDENT      shift, and go to state 55

    integer_literal_decl  go to state 92
    double_literal_decl   go to state 93
    bool_literal_decl     go to state 94
    str_const_decl        go to state 95
    literal_decl          go to state 96
    literal_prt           go to state 97
    assignment_decl       go to state 98
    exp                   go to state 178
    function_invocation   go to state 100
    ref_exp               go to state 101


state 146

   43 exp: exp TOK_GT . exp

    TOK_MINUS      shift, and go to state 83
    TOK_BITNOT     shift, and go to state 84
    TOK_NOT        shift, and go to state 85
    TOK_LPAREN     shift, and go to state 86
    TOK_UINTNUM    shift, and go to state 87
    TOK_DOUBLENUM  shift, and go to state 88
    TOK_STRCONST   shift, and go to state 89
    TOK_TRUE       shift, and go to state 90
    TOK_FALSE      shift, and go to state 91
    TOK_IDENT      shift, and go to state 55

    integer_literal_decl  go to state 92
    double_literal_decl   go to state 93
    bool_literal_decl     go to state 94
    str_const_decl        go to state 95
    literal_decl          go to state 96
    literal_prt           go to state 97
    assignment_decl       go to state 98
    exp                   go to state 179
    function_invocation   go to state 100
    ref_exp               go to state 101


state 147

   45 exp: exp TOK_LT . exp

    TOK_MINUS      shift, and go to state 83
    TOK_BITNOT     shift, and go to state 84
    TOK_NOT        shift, and go to state 85
    TOK_LPAREN     shift, and go to state 86
    TOK_UINTNUM    shift, and go to state 87
    TOK_DOUBLENUM  shift, and go to state 88
    TOK_STRCONST   shift, and go to state 89
    TOK_TRUE       shift, and go to state 90
    TOK_FALSE      shift, and go to state 91
    TOK_IDENT      shift, and go to state 55

    integer_literal_decl  go to state 92
    double_literal_decl   go to state 93
    bool_literal_decl     go to state 94
    str_const_decl        go to state 95
    literal_decl          go to state 96
    literal_prt           go to state 97
    assignment_decl       go to state 98
    exp                   go to state 180
    function_invocation   go to state 100
    ref_exp               go to state 101


state 148

   44 exp: exp TOK_GE . exp

    TOK_MINUS      shift, and go to state 83
    TOK_BITNOT     shift, and go to state 84
    TOK_NOT        shift, and go to state 85
    TOK_LPAREN     shift, and go to state 86
    TOK_UINTNUM    shift, and go to state 87
    TOK_DOUBLENUM  shift, and go to state 88
    TOK_STRCONST   shift, and go to state 89
    TOK_TRUE       shift, and go to state 90
    TOK_FALSE      shift, and go to state 91
    TOK_IDENT      shift, and go to state 55

    integer_literal_decl  go to state 92
    double_literal_decl   go to state 93
    bool_literal_decl     go to state 94
    str_const_decl        go to state 95
    literal_decl          go to state 96
    literal_prt           go to state 97
    assignment_decl       go to state 98
    exp                   go to state 181
    function_invocation   go to state 100
    ref_exp               go to state 101


state 149

   46 exp: exp TOK_LE . exp

    TOK_MINUS      shift, and go to state 83
    TOK_BITNOT     shift, and go to state 84
    TOK_NOT        shift, and go to state 85
    TOK_LPAREN     shift, and go to state 86
    TOK_UINTNUM    shift, and go to state 87
    TOK_DOUBLENUM  shift, and go to state 88
    TOK_STRCONST   shift, and go to state 89
    TOK_TRUE       shift, and go to state 90
    TOK_FALSE      shift, and go to state 91
    TOK_IDENT      shift, and go to state 55

    integer_literal_decl  go to state 92
    double_literal_decl   go to state 93
    bool_literal_decl     go to state 94
    str_const_decl        go to state 95
    literal_decl          go to state 96
    literal_prt           go to state 97
    assignment_decl       go to state 98
    exp                   go to state 182
    function_invocation   go to state 100
    ref_exp               go to state 101


state 150

   52 exp: exp TOK_EQ . exp

    TOK_MINUS      shift, and go to state 83
    TOK_BITNOT     shift, and go to state 84
    TOK_NOT        shift, and go to state 85
    TOK_LPAREN     shift, and go to state 86
    TOK_UINTNUM    shift, and go to state 87
    TOK_DOUBLENUM  shift, and go to state 88
    TOK_STRCONST   shift, and go to state 89
    TOK_TRUE       shift, and go to state 90
    TOK_FALSE      shift, and go to state 91
    TOK_IDENT      shift, and go to state 55

    integer_literal_decl  go to state 92
    double_literal_decl   go to state 93
    bool_literal_decl     go to state 94
    str_const_decl        go to state 95
    literal_decl          go to state 96
    literal_prt           go to state 97
    assignment_decl       go to state 98
    exp                   go to state 183
    function_invocation   go to state 100
    ref_exp               go to state 101


state 151

   53 exp: exp TOK_NE . exp

    TOK_MINUS      shift, and go to state 83
    TOK_BITNOT     shift, and go to state 84
    TOK_NOT        shift, and go to state 85
    TOK_LPAREN     shift, and go to state 86
    TOK_UINTNUM    shift, and go to state 87
    TOK_DOUBLENUM  shift, and go to state 88
    TOK_STRCONST   shift, and go to state 89
    TOK_TRUE       shift, and go to state 90
    TOK_FALSE      shift, and go to state 91
    TOK_IDENT      shift, and go to state 55

    integer_literal_decl  go to state 92
    double_literal_decl   go to state 93
    bool_literal_decl     go to state 94
    str_const_decl        go to state 95
    literal_decl          go to state 96
    literal_prt           go to state 97
    assignment_decl       go to state 98
    exp                   go to state 184
    function_invocation   go to state 100
    ref_exp               go to state 101


state 152

   40 exp: exp TOK_AND . exp

    TOK_MINUS      shift, and go to state 83
    TOK_BITNOT     shift, and go to state 84
    TOK_NOT        shift, and go to state 85
    TOK_LPAREN     shift, and go to state 86
    TOK_UINTNUM    shift, and go to state 87
    TOK_DOUBLENUM  shift, and go to state 88
    TOK_STRCONST   shift, and go to state 89
    TOK_TRUE       shift, and go to state 90
    TOK_FALSE      shift, and go to state 91
    TOK_IDENT      shift, and go to state 55

    integer_literal_decl  go to state 92
    double_literal_decl   go to state 93
    bool_literal_decl     go to state 94
    str_const_decl        go to state 95
    literal_decl          go to state 96
    literal_prt           go to state 97
    assignment_decl       go to state 98
    exp                   go to state 185
    function_invocation   go to state 100
    ref_exp               go to state 101


state 153

   47 exp: exp TOK_OR . exp

    TOK_MINUS      shift, and go to state 83
    TOK_BITNOT     shift, and go to state 84
    TOK_NOT        shift, and go to state 85
    TOK_LPAREN     shift, and go to state 86
    TOK_UINTNUM    shift, and go to state 87
    TOK_DOUBLENUM  shift, and go to state 88
    TOK_STRCONST   shift, and go to state 89
    TOK_TRUE       shift, and go to state 90
    TOK_FALSE      shift, and go to state 91
    TOK_IDENT      shift, and go to state 55

    integer_literal_decl  go to state 92
    double_literal_decl   go to state 93
    bool_literal_decl     go to state 94
    str_const_decl        go to state 95
    literal_decl          go to state 96
    literal_prt           go to state 97
    assignment_decl       go to state 98
    exp                   go to state 186
    function_invocation   go to state 100
    ref_exp               go to state 101


state 154

   99 only_if_without_else: TOK_IF exp statement_decl .

    $default  reduce using rule 99 (only_if_without_else)


state 155

   86 statement_decl: TOK_RETURN exp TOK_SEMICOLON .

    $default  reduce using rule 86 (statement_decl)


state 156

   36 exp: exp . TOK_PLUS exp
   37    | exp . TOK_MINUS exp
   38    | exp . TOK_MULT exp
   39    | exp . TOK_DIV exp
   40    | exp . TOK_AND exp
   41    | exp . TOK_BITAND exp
   42    | exp . TOK_BITOR exp
   43    | exp . TOK_GT exp
   44    | exp . TOK_GE exp
   45    | exp . TOK_LT exp
   46    | exp . TOK_LE exp
   47    | exp . TOK_OR exp
   48    | exp . TOK_SHL exp
   49    | exp . TOK_SHR exp
   50    | exp . TOK_BITXOR exp
   51    | exp . TOK_MOD exp
   52    | exp . TOK_EQ exp
   53    | exp . TOK_NE exp
   91 inside_function: exp .

    TOK_PLUS    shift, and go to state 136
    TOK_MINUS   shift, and go to state 137
    TOK_MULT    shift, and go to state 138
    TOK_DIV     shift, and go to state 139
    TOK_MOD     shift, and go to state 140
    TOK_BITAND  shift, and go to state 141
    TOK_BITOR   shift, and go to state 142
    TOK_BITXOR  shift, and go to state 143
    TOK_SHL     shift, and go to state 144
    TOK_SHR     shift, and go to state 145
    TOK_GT      shift, and go to state 146
    TOK_LT      shift, and go to state 147
    TOK_GE      shift, and go to state 148
    TOK_LE      shift, and go to state 149
    TOK_EQ      shift, and go to state 150
    TOK_NE      shift, and go to state 151
    TOK_AND     shift, and go to state 152
    TOK_OR      shift, and go to state 153

    $default  reduce using rule 91 (inside_function)


state 157

   92 inside_function: inside_function . TOK_COMMA exp
   94 function_list: inside_function .

    TOK_COMMA  shift, and go to state 187

    $default  reduce using rule 94 (function_list)


state 158

   95 function_invocation_list: TOK_LPAREN function_list . TOK_RPAREN

    TOK_RPAREN  shift, and go to state 188


state 159

   83 statement_decl: only_if_without_else TOK_ELSE statement_decl .

    $default  reduce using rule 83 (statement_decl)


state 160

   31 assignment_decl: ref_exp TOK_ASSIGN exp .
   36 exp: exp . TOK_PLUS exp
   37    | exp . TOK_MINUS exp
   38    | exp . TOK_MULT exp
   39    | exp . TOK_DIV exp
   40    | exp . TOK_AND exp
   41    | exp . TOK_BITAND exp
   42    | exp . TOK_BITOR exp
   43    | exp . TOK_GT exp
   44    | exp . TOK_GE exp
   45    | exp . TOK_LT exp
   46    | exp . TOK_LE exp
   47    | exp . TOK_OR exp
   48    | exp . TOK_SHL exp
   49    | exp . TOK_SHR exp
   50    | exp . TOK_BITXOR exp
   51    | exp . TOK_MOD exp
   52    | exp . TOK_EQ exp
   53    | exp . TOK_NE exp

    TOK_PLUS    shift, and go to state 136
    TOK_MINUS   shift, and go to state 137
    TOK_MULT    shift, and go to state 138
    TOK_DIV     shift, and go to state 139
    TOK_MOD     shift, and go to state 140
    TOK_BITAND  shift, and go to state 141
    TOK_BITOR   shift, and go to state 142
    TOK_BITXOR  shift, and go to state 143
    TOK_SHL     shift, and go to state 144
    TOK_SHR     shift, and go to state 145
    TOK_GT      shift, and go to state 146
    TOK_LT      shift, and go to state 147
    TOK_GE      shift, and go to state 148
    TOK_LE      shift, and go to state 149
    TOK_EQ      shift, and go to state 150
    TOK_NE      shift, and go to state 151
    TOK_AND     shift, and go to state 152
    TOK_OR      shift, and go to state 153

    $default  reduce using rule 31 (assignment_decl)


state 161

  115 param_decl: type_decl TOK_IDENT .

    $default  reduce using rule 115 (param_decl)


state 162

  116 formal_param_list_decl: TOK_LPAREN param_list_star TOK_RPAREN .

    $default  reduce using rule 116 (formal_param_list_decl)


state 163

  114 param_list: param_list TOK_COMMA . param_decl

    TOK_VOID      shift, and go to state 11
    TOK_STRING    shift, and go to state 12
    TOK_INT       shift, and go to state 13
    TOK_UNSIGNED  shift, and go to state 14
    TOK_BOOL      shift, and go to state 15
    TOK_BYTE      shift, and go to state 16
    TOK_DOUBLE    shift, and go to state 17
    TOK_IDENT     shift, and go to state 113

    base_type   go to state 21
    type_decl   go to state 114
    param_decl  go to state 189


state 164

   98 function_body_invoc: TOK_LBRACE function_body_decl TOK_RBRACE .

    $default  reduce using rule 98 (function_body_invoc)


state 165

   89 statement_decl_list: statement_decl_list . statement_decl
   96 function_body_decl: variable_decl_list statement_decl_list .

    TOK_SEMICOLON  shift, and go to state 51
    TOK_LBRACE     shift, and go to state 52
    TOK_IF         shift, and go to state 53
    TOK_RETURN     shift, and go to state 54
    TOK_IDENT      shift, and go to state 55

    $default  reduce using rule 96 (function_body_decl)

    assignment_decl          go to state 56
    statement_decl           go to state 131
    function_invocation      go to state 58
    only_if_without_else     go to state 59
    compound_statement_decl  go to state 60
    compound_statement_star  go to state 61
    ref_exp                  go to state 62


state 166

  110 variable_decl_list: variable_decl_list variable_decl .

    $default  reduce using rule 110 (variable_decl_list)


state 167

   80 event_param_list: event_param_list TOK_COMMA TOK_IDENT .

    $default  reduce using rule 80 (event_param_list)


state 168

   57 exp: TOK_LPAREN exp TOK_RPAREN .

    $default  reduce using rule 57 (exp)


state 169

   36 exp: exp . TOK_PLUS exp
   36    | exp TOK_PLUS exp .
   37    | exp . TOK_MINUS exp
   38    | exp . TOK_MULT exp
   39    | exp . TOK_DIV exp
   40    | exp . TOK_AND exp
   41    | exp . TOK_BITAND exp
   42    | exp . TOK_BITOR exp
   43    | exp . TOK_GT exp
   44    | exp . TOK_GE exp
   45    | exp . TOK_LT exp
   46    | exp . TOK_LE exp
   47    | exp . TOK_OR exp
   48    | exp . TOK_SHL exp
   49    | exp . TOK_SHR exp
   50    | exp . TOK_BITXOR exp
   51    | exp . TOK_MOD exp
   52    | exp . TOK_EQ exp
   53    | exp . TOK_NE exp

    TOK_MULT  shift, and go to state 138
    TOK_DIV   shift, and go to state 139
    TOK_MOD   shift, and go to state 140

    $default  reduce using rule 36 (exp)


state 170

   36 exp: exp . TOK_PLUS exp
   37    | exp . TOK_MINUS exp
   37    | exp TOK_MINUS exp .
   38    | exp . TOK_MULT exp
   39    | exp . TOK_DIV exp
   40    | exp . TOK_AND exp
   41    | exp . TOK_BITAND exp
   42    | exp . TOK_BITOR exp
   43    | exp . TOK_GT exp
   44    | exp . TOK_GE exp
   45    | exp . TOK_LT exp
   46    | exp . TOK_LE exp
   47    | exp . TOK_OR exp
   48    | exp . TOK_SHL exp
   49    | exp . TOK_SHR exp
   50    | exp . TOK_BITXOR exp
   51    | exp . TOK_MOD exp
   52    | exp . TOK_EQ exp
   53    | exp . TOK_NE exp

    TOK_MULT  shift, and go to state 138
    TOK_DIV   shift, and go to state 139
    TOK_MOD   shift, and go to state 140

    $default  reduce using rule 37 (exp)


state 171

   36 exp: exp . TOK_PLUS exp
   37    | exp . TOK_MINUS exp
   38    | exp . TOK_MULT exp
   38    | exp TOK_MULT exp .
   39    | exp . TOK_DIV exp
   40    | exp . TOK_AND exp
   41    | exp . TOK_BITAND exp
   42    | exp . TOK_BITOR exp
   43    | exp . TOK_GT exp
   44    | exp . TOK_GE exp
   45    | exp . TOK_LT exp
   46    | exp . TOK_LE exp
   47    | exp . TOK_OR exp
   48    | exp . TOK_SHL exp
   49    | exp . TOK_SHR exp
   50    | exp . TOK_BITXOR exp
   51    | exp . TOK_MOD exp
   52    | exp . TOK_EQ exp
   53    | exp . TOK_NE exp

    $default  reduce using rule 38 (exp)


state 172

   36 exp: exp . TOK_PLUS exp
   37    | exp . TOK_MINUS exp
   38    | exp . TOK_MULT exp
   39    | exp . TOK_DIV exp
   39    | exp TOK_DIV exp .
   40    | exp . TOK_AND exp
   41    | exp . TOK_BITAND exp
   42    | exp . TOK_BITOR exp
   43    | exp . TOK_GT exp
   44    | exp . TOK_GE exp
   45    | exp . TOK_LT exp
   46    | exp . TOK_LE exp
   47    | exp . TOK_OR exp
   48    | exp . TOK_SHL exp
   49    | exp . TOK_SHR exp
   50    | exp . TOK_BITXOR exp
   51    | exp . TOK_MOD exp
   52    | exp . TOK_EQ exp
   53    | exp . TOK_NE exp

    $default  reduce using rule 39 (exp)


state 173

   36 exp: exp . TOK_PLUS exp
   37    | exp . TOK_MINUS exp
   38    | exp . TOK_MULT exp
   39    | exp . TOK_DIV exp
   40    | exp . TOK_AND exp
   41    | exp . TOK_BITAND exp
   42    | exp . TOK_BITOR exp
   43    | exp . TOK_GT exp
   44    | exp . TOK_GE exp
   45    | exp . TOK_LT exp
   46    | exp . TOK_LE exp
   47    | exp . TOK_OR exp
   48    | exp . TOK_SHL exp
   49    | exp . TOK_SHR exp
   50    | exp . TOK_BITXOR exp
   51    | exp . TOK_MOD exp
   51    | exp TOK_MOD exp .
   52    | exp . TOK_EQ exp
   53    | exp . TOK_NE exp

    $default  reduce using rule 51 (exp)


state 174

   36 exp: exp . TOK_PLUS exp
   37    | exp . TOK_MINUS exp
   38    | exp . TOK_MULT exp
   39    | exp . TOK_DIV exp
   40    | exp . TOK_AND exp
   41    | exp . TOK_BITAND exp
   41    | exp TOK_BITAND exp .
   42    | exp . TOK_BITOR exp
   43    | exp . TOK_GT exp
   44    | exp . TOK_GE exp
   45    | exp . TOK_LT exp
   46    | exp . TOK_LE exp
   47    | exp . TOK_OR exp
   48    | exp . TOK_SHL exp
   49    | exp . TOK_SHR exp
   50    | exp . TOK_BITXOR exp
   51    | exp . TOK_MOD exp
   52    | exp . TOK_EQ exp
   53    | exp . TOK_NE exp

    TOK_PLUS   shift, and go to state 136
    TOK_MINUS  shift, and go to state 137
    TOK_MULT   shift, and go to state 138
    TOK_DIV    shift, and go to state 139
    TOK_MOD    shift, and go to state 140
    TOK_SHL    shift, and go to state 144
    TOK_SHR    shift, and go to state 145

    $default  reduce using rule 41 (exp)


state 175

   36 exp: exp . TOK_PLUS exp
   37    | exp . TOK_MINUS exp
   38    | exp . TOK_MULT exp
   39    | exp . TOK_DIV exp
   40    | exp . TOK_AND exp
   41    | exp . TOK_BITAND exp
   42    | exp . TOK_BITOR exp
   42    | exp TOK_BITOR exp .
   43    | exp . TOK_GT exp
   44    | exp . TOK_GE exp
   45    | exp . TOK_LT exp
   46    | exp . TOK_LE exp
   47    | exp . TOK_OR exp
   48    | exp . TOK_SHL exp
   49    | exp . TOK_SHR exp
   50    | exp . TOK_BITXOR exp
   51    | exp . TOK_MOD exp
   52    | exp . TOK_EQ exp
   53    | exp . TOK_NE exp

    TOK_PLUS    shift, and go to state 136
    TOK_MINUS   shift, and go to state 137
    TOK_MULT    shift, and go to state 138
    TOK_DIV     shift, and go to state 139
    TOK_MOD     shift, and go to state 140
    TOK_BITAND  shift, and go to state 141
    TOK_SHL     shift, and go to state 144
    TOK_SHR     shift, and go to state 145

    $default  reduce using rule 42 (exp)


state 176

   36 exp: exp . TOK_PLUS exp
   37    | exp . TOK_MINUS exp
   38    | exp . TOK_MULT exp
   39    | exp . TOK_DIV exp
   40    | exp . TOK_AND exp
   41    | exp . TOK_BITAND exp
   42    | exp . TOK_BITOR exp
   43    | exp . TOK_GT exp
   44    | exp . TOK_GE exp
   45    | exp . TOK_LT exp
   46    | exp . TOK_LE exp
   47    | exp . TOK_OR exp
   48    | exp . TOK_SHL exp
   49    | exp . TOK_SHR exp
   50    | exp . TOK_BITXOR exp
   50    | exp TOK_BITXOR exp .
   51    | exp . TOK_MOD exp
   52    | exp . TOK_EQ exp
   53    | exp . TOK_NE exp

    TOK_PLUS    shift, and go to state 136
    TOK_MINUS   shift, and go to state 137
    TOK_MULT    shift, and go to state 138
    TOK_DIV     shift, and go to state 139
    TOK_MOD     shift, and go to state 140
    TOK_BITAND  shift, and go to state 141
    TOK_SHL     shift, and go to state 144
    TOK_SHR     shift, and go to state 145

    $default  reduce using rule 50 (exp)


state 177

   36 exp: exp . TOK_PLUS exp
   37    | exp . TOK_MINUS exp
   38    | exp . TOK_MULT exp
   39    | exp . TOK_DIV exp
   40    | exp . TOK_AND exp
   41    | exp . TOK_BITAND exp
   42    | exp . TOK_BITOR exp
   43    | exp . TOK_GT exp
   44    | exp . TOK_GE exp
   45    | exp . TOK_LT exp
   46    | exp . TOK_LE exp
   47    | exp . TOK_OR exp
   48    | exp . TOK_SHL exp
   48    | exp TOK_SHL exp .
   49    | exp . TOK_SHR exp
   50    | exp . TOK_BITXOR exp
   51    | exp . TOK_MOD exp
   52    | exp . TOK_EQ exp
   53    | exp . TOK_NE exp

    TOK_PLUS   shift, and go to state 136
    TOK_MINUS  shift, and go to state 137
    TOK_MULT   shift, and go to state 138
    TOK_DIV    shift, and go to state 139
    TOK_MOD    shift, and go to state 140

    $default  reduce using rule 48 (exp)


state 178

   36 exp: exp . TOK_PLUS exp
   37    | exp . TOK_MINUS exp
   38    | exp . TOK_MULT exp
   39    | exp . TOK_DIV exp
   40    | exp . TOK_AND exp
   41    | exp . TOK_BITAND exp
   42    | exp . TOK_BITOR exp
   43    | exp . TOK_GT exp
   44    | exp . TOK_GE exp
   45    | exp . TOK_LT exp
   46    | exp . TOK_LE exp
   47    | exp . TOK_OR exp
   48    | exp . TOK_SHL exp
   49    | exp . TOK_SHR exp
   49    | exp TOK_SHR exp .
   50    | exp . TOK_BITXOR exp
   51    | exp . TOK_MOD exp
   52    | exp . TOK_EQ exp
   53    | exp . TOK_NE exp

    TOK_PLUS   shift, and go to state 136
    TOK_MINUS  shift, and go to state 137
    TOK_MULT   shift, and go to state 138
    TOK_DIV    shift, and go to state 139
    TOK_MOD    shift, and go to state 140

    $default  reduce using rule 49 (exp)


state 179

   36 exp: exp . TOK_PLUS exp
   37    | exp . TOK_MINUS exp
   38    | exp . TOK_MULT exp
   39    | exp . TOK_DIV exp
   40    | exp . TOK_AND exp
   41    | exp . TOK_BITAND exp
   42    | exp . TOK_BITOR exp
   43    | exp . TOK_GT exp
   43    | exp TOK_GT exp .
   44    | exp . TOK_GE exp
   45    | exp . TOK_LT exp
   46    | exp . TOK_LE exp
   47    | exp . TOK_OR exp
   48    | exp . TOK_SHL exp
   49    | exp . TOK_SHR exp
   50    | exp . TOK_BITXOR exp
   51    | exp . TOK_MOD exp
   52    | exp . TOK_EQ exp
   53    | exp . TOK_NE exp

    TOK_PLUS    shift, and go to state 136
    TOK_MINUS   shift, and go to state 137
    TOK_MULT    shift, and go to state 138
    TOK_DIV     shift, and go to state 139
    TOK_MOD     shift, and go to state 140
    TOK_BITAND  shift, and go to state 141
    TOK_BITOR   shift, and go to state 142
    TOK_BITXOR  shift, and go to state 143
    TOK_SHL     shift, and go to state 144
    TOK_SHR     shift, and go to state 145

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 43 (exp)


state 180

   36 exp: exp . TOK_PLUS exp
   37    | exp . TOK_MINUS exp
   38    | exp . TOK_MULT exp
   39    | exp . TOK_DIV exp
   40    | exp . TOK_AND exp
   41    | exp . TOK_BITAND exp
   42    | exp . TOK_BITOR exp
   43    | exp . TOK_GT exp
   44    | exp . TOK_GE exp
   45    | exp . TOK_LT exp
   45    | exp TOK_LT exp .
   46    | exp . TOK_LE exp
   47    | exp . TOK_OR exp
   48    | exp . TOK_SHL exp
   49    | exp . TOK_SHR exp
   50    | exp . TOK_BITXOR exp
   51    | exp . TOK_MOD exp
   52    | exp . TOK_EQ exp
   53    | exp . TOK_NE exp

    TOK_PLUS    shift, and go to state 136
    TOK_MINUS   shift, and go to state 137
    TOK_MULT    shift, and go to state 138
    TOK_DIV     shift, and go to state 139
    TOK_MOD     shift, and go to state 140
    TOK_BITAND  shift, and go to state 141
    TOK_BITOR   shift, and go to state 142
    TOK_BITXOR  shift, and go to state 143
    TOK_SHL     shift, and go to state 144
    TOK_SHR     shift, and go to state 145

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 45 (exp)


state 181

   36 exp: exp . TOK_PLUS exp
   37    | exp . TOK_MINUS exp
   38    | exp . TOK_MULT exp
   39    | exp . TOK_DIV exp
   40    | exp . TOK_AND exp
   41    | exp . TOK_BITAND exp
   42    | exp . TOK_BITOR exp
   43    | exp . TOK_GT exp
   44    | exp . TOK_GE exp
   44    | exp TOK_GE exp .
   45    | exp . TOK_LT exp
   46    | exp . TOK_LE exp
   47    | exp . TOK_OR exp
   48    | exp . TOK_SHL exp
   49    | exp . TOK_SHR exp
   50    | exp . TOK_BITXOR exp
   51    | exp . TOK_MOD exp
   52    | exp . TOK_EQ exp
   53    | exp . TOK_NE exp

    TOK_PLUS    shift, and go to state 136
    TOK_MINUS   shift, and go to state 137
    TOK_MULT    shift, and go to state 138
    TOK_DIV     shift, and go to state 139
    TOK_MOD     shift, and go to state 140
    TOK_BITAND  shift, and go to state 141
    TOK_BITOR   shift, and go to state 142
    TOK_BITXOR  shift, and go to state 143
    TOK_SHL     shift, and go to state 144
    TOK_SHR     shift, and go to state 145

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 44 (exp)


state 182

   36 exp: exp . TOK_PLUS exp
   37    | exp . TOK_MINUS exp
   38    | exp . TOK_MULT exp
   39    | exp . TOK_DIV exp
   40    | exp . TOK_AND exp
   41    | exp . TOK_BITAND exp
   42    | exp . TOK_BITOR exp
   43    | exp . TOK_GT exp
   44    | exp . TOK_GE exp
   45    | exp . TOK_LT exp
   46    | exp . TOK_LE exp
   46    | exp TOK_LE exp .
   47    | exp . TOK_OR exp
   48    | exp . TOK_SHL exp
   49    | exp . TOK_SHR exp
   50    | exp . TOK_BITXOR exp
   51    | exp . TOK_MOD exp
   52    | exp . TOK_EQ exp
   53    | exp . TOK_NE exp

    TOK_PLUS    shift, and go to state 136
    TOK_MINUS   shift, and go to state 137
    TOK_MULT    shift, and go to state 138
    TOK_DIV     shift, and go to state 139
    TOK_MOD     shift, and go to state 140
    TOK_BITAND  shift, and go to state 141
    TOK_BITOR   shift, and go to state 142
    TOK_BITXOR  shift, and go to state 143
    TOK_SHL     shift, and go to state 144
    TOK_SHR     shift, and go to state 145

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 46 (exp)


state 183

   36 exp: exp . TOK_PLUS exp
   37    | exp . TOK_MINUS exp
   38    | exp . TOK_MULT exp
   39    | exp . TOK_DIV exp
   40    | exp . TOK_AND exp
   41    | exp . TOK_BITAND exp
   42    | exp . TOK_BITOR exp
   43    | exp . TOK_GT exp
   44    | exp . TOK_GE exp
   45    | exp . TOK_LT exp
   46    | exp . TOK_LE exp
   47    | exp . TOK_OR exp
   48    | exp . TOK_SHL exp
   49    | exp . TOK_SHR exp
   50    | exp . TOK_BITXOR exp
   51    | exp . TOK_MOD exp
   52    | exp . TOK_EQ exp
   52    | exp TOK_EQ exp .
   53    | exp . TOK_NE exp

    TOK_PLUS    shift, and go to state 136
    TOK_MINUS   shift, and go to state 137
    TOK_MULT    shift, and go to state 138
    TOK_DIV     shift, and go to state 139
    TOK_MOD     shift, and go to state 140
    TOK_BITAND  shift, and go to state 141
    TOK_BITOR   shift, and go to state 142
    TOK_BITXOR  shift, and go to state 143
    TOK_SHL     shift, and go to state 144
    TOK_SHR     shift, and go to state 145

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 52 (exp)


state 184

   36 exp: exp . TOK_PLUS exp
   37    | exp . TOK_MINUS exp
   38    | exp . TOK_MULT exp
   39    | exp . TOK_DIV exp
   40    | exp . TOK_AND exp
   41    | exp . TOK_BITAND exp
   42    | exp . TOK_BITOR exp
   43    | exp . TOK_GT exp
   44    | exp . TOK_GE exp
   45    | exp . TOK_LT exp
   46    | exp . TOK_LE exp
   47    | exp . TOK_OR exp
   48    | exp . TOK_SHL exp
   49    | exp . TOK_SHR exp
   50    | exp . TOK_BITXOR exp
   51    | exp . TOK_MOD exp
   52    | exp . TOK_EQ exp
   53    | exp . TOK_NE exp
   53    | exp TOK_NE exp .

    TOK_PLUS    shift, and go to state 136
    TOK_MINUS   shift, and go to state 137
    TOK_MULT    shift, and go to state 138
    TOK_DIV     shift, and go to state 139
    TOK_MOD     shift, and go to state 140
    TOK_BITAND  shift, and go to state 141
    TOK_BITOR   shift, and go to state 142
    TOK_BITXOR  shift, and go to state 143
    TOK_SHL     shift, and go to state 144
    TOK_SHR     shift, and go to state 145

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 53 (exp)


state 185

   36 exp: exp . TOK_PLUS exp
   37    | exp . TOK_MINUS exp
   38    | exp . TOK_MULT exp
   39    | exp . TOK_DIV exp
   40    | exp . TOK_AND exp
   40    | exp TOK_AND exp .
   41    | exp . TOK_BITAND exp
   42    | exp . TOK_BITOR exp
   43    | exp . TOK_GT exp
   44    | exp . TOK_GE exp
   45    | exp . TOK_LT exp
   46    | exp . TOK_LE exp
   47    | exp . TOK_OR exp
   48    | exp . TOK_SHL exp
   49    | exp . TOK_SHR exp
   50    | exp . TOK_BITXOR exp
   51    | exp . TOK_MOD exp
   52    | exp . TOK_EQ exp
   53    | exp . TOK_NE exp

    TOK_PLUS    shift, and go to state 136
    TOK_MINUS   shift, and go to state 137
    TOK_MULT    shift, and go to state 138
    TOK_DIV     shift, and go to state 139
    TOK_MOD     shift, and go to state 140
    TOK_BITAND  shift, and go to state 141
    TOK_BITOR   shift, and go to state 142
    TOK_BITXOR  shift, and go to state 143
    TOK_SHL     shift, and go to state 144
    TOK_SHR     shift, and go to state 145
    TOK_GT      shift, and go to state 146
    TOK_LT      shift, and go to state 147
    TOK_GE      shift, and go to state 148
    TOK_LE      shift, and go to state 149
    TOK_EQ      shift, and go to state 150
    TOK_NE      shift, and go to state 151

    $default  reduce using rule 40 (exp)


state 186

   36 exp: exp . TOK_PLUS exp
   37    | exp . TOK_MINUS exp
   38    | exp . TOK_MULT exp
   39    | exp . TOK_DIV exp
   40    | exp . TOK_AND exp
   41    | exp . TOK_BITAND exp
   42    | exp . TOK_BITOR exp
   43    | exp . TOK_GT exp
   44    | exp . TOK_GE exp
   45    | exp . TOK_LT exp
   46    | exp . TOK_LE exp
   47    | exp . TOK_OR exp
   47    | exp TOK_OR exp .
   48    | exp . TOK_SHL exp
   49    | exp . TOK_SHR exp
   50    | exp . TOK_BITXOR exp
   51    | exp . TOK_MOD exp
   52    | exp . TOK_EQ exp
   53    | exp . TOK_NE exp

    TOK_PLUS    shift, and go to state 136
    TOK_MINUS   shift, and go to state 137
    TOK_MULT    shift, and go to state 138
    TOK_DIV     shift, and go to state 139
    TOK_MOD     shift, and go to state 140
    TOK_BITAND  shift, and go to state 141
    TOK_BITOR   shift, and go to state 142
    TOK_BITXOR  shift, and go to state 143
    TOK_SHL     shift, and go to state 144
    TOK_SHR     shift, and go to state 145
    TOK_GT      shift, and go to state 146
    TOK_LT      shift, and go to state 147
    TOK_GE      shift, and go to state 148
    TOK_LE      shift, and go to state 149
    TOK_EQ      shift, and go to state 150
    TOK_NE      shift, and go to state 151
    TOK_AND     shift, and go to state 152

    $default  reduce using rule 47 (exp)


state 187

   92 inside_function: inside_function TOK_COMMA . exp

    TOK_MINUS      shift, and go to state 83
    TOK_BITNOT     shift, and go to state 84
    TOK_NOT        shift, and go to state 85
    TOK_LPAREN     shift, and go to state 86
    TOK_UINTNUM    shift, and go to state 87
    TOK_DOUBLENUM  shift, and go to state 88
    TOK_STRCONST   shift, and go to state 89
    TOK_TRUE       shift, and go to state 90
    TOK_FALSE      shift, and go to state 91
    TOK_IDENT      shift, and go to state 55

    integer_literal_decl  go to state 92
    double_literal_decl   go to state 93
    bool_literal_decl     go to state 94
    str_const_decl        go to state 95
    literal_decl          go to state 96
    literal_prt           go to state 97
    assignment_decl       go to state 98
    exp                   go to state 190
    function_invocation   go to state 100
    ref_exp               go to state 101


state 188

   95 function_invocation_list: TOK_LPAREN function_list TOK_RPAREN .

    $default  reduce using rule 95 (function_invocation_list)


state 189

  114 param_list: param_list TOK_COMMA param_decl .

    $default  reduce using rule 114 (param_list)


state 190

   36 exp: exp . TOK_PLUS exp
   37    | exp . TOK_MINUS exp
   38    | exp . TOK_MULT exp
   39    | exp . TOK_DIV exp
   40    | exp . TOK_AND exp
   41    | exp . TOK_BITAND exp
   42    | exp . TOK_BITOR exp
   43    | exp . TOK_GT exp
   44    | exp . TOK_GE exp
   45    | exp . TOK_LT exp
   46    | exp . TOK_LE exp
   47    | exp . TOK_OR exp
   48    | exp . TOK_SHL exp
   49    | exp . TOK_SHR exp
   50    | exp . TOK_BITXOR exp
   51    | exp . TOK_MOD exp
   52    | exp . TOK_EQ exp
   53    | exp . TOK_NE exp
   92 inside_function: inside_function TOK_COMMA exp .

    TOK_PLUS    shift, and go to state 136
    TOK_MINUS   shift, and go to state 137
    TOK_MULT    shift, and go to state 138
    TOK_DIV     shift, and go to state 139
    TOK_MOD     shift, and go to state 140
    TOK_BITAND  shift, and go to state 141
    TOK_BITOR   shift, and go to state 142
    TOK_BITXOR  shift, and go to state 143
    TOK_SHL     shift, and go to state 144
    TOK_SHR     shift, and go to state 145
    TOK_GT      shift, and go to state 146
    TOK_LT      shift, and go to state 147
    TOK_GE      shift, and go to state 148
    TOK_LE      shift, and go to state 149
    TOK_EQ      shift, and go to state 150
    TOK_NE      shift, and go to state 151
    TOK_AND     shift, and go to state 152
    TOK_OR      shift, and go to state 153

    $default  reduce using rule 92 (inside_function)
